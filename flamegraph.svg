<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="3239"><g><title>&lt;regex::regex::string::Regex as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="0.0000%" y="725" width="0.0309%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="0.0000%" y="709" width="0.0309%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::new (1 samples, 0.03%)</title><rect x="0.0000%" y="693" width="0.0309%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="0.0000%" y="677" width="0.0309%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.06%)</title><rect x="0.0000%" y="773" width="0.0617%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.06%)</title><rect x="0.0000%" y="757" width="0.0617%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2 samples, 0.06%)</title><rect x="0.0000%" y="741" width="0.0617%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="0.0309%" y="725" width="0.0309%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2809%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="0.0309%" y="709" width="0.0309%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2809%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="0.0309%" y="693" width="0.0309%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2809%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="0.0309%" y="677" width="0.0309%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2809%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="0.0309%" y="661" width="0.0309%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2809%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="0.0309%" y="645" width="0.0309%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2809%" y="655.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="0.0309%" y="629" width="0.0309%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2809%" y="639.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.03%)</title><rect x="0.0309%" y="613" width="0.0309%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.2809%" y="623.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="0.0309%" y="597" width="0.0309%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.2809%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="0.0617%" y="661" width="0.0309%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.3117%" y="671.50"></text></g><g><title>spellbook::aff::parser::parse::{{closure}} (1 samples, 0.03%)</title><rect x="0.0617%" y="645" width="0.0309%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.3117%" y="655.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (1 samples, 0.03%)</title><rect x="0.0617%" y="629" width="0.0309%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.3117%" y="639.50"></text></g><g><title>spellbook::aff::parser::Lines::advance_line (1 samples, 0.03%)</title><rect x="0.0926%" y="661" width="0.0309%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.3426%" y="671.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (1 samples, 0.03%)</title><rect x="0.0926%" y="645" width="0.0309%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.3426%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.03%)</title><rect x="0.0926%" y="629" width="0.0309%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.3426%" y="639.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.03%)</title><rect x="0.0926%" y="613" width="0.0309%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.3426%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0926%" y="597" width="0.0309%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.3426%" y="607.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0926%" y="581" width="0.0309%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="0.3426%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0926%" y="565" width="0.0309%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="0.3426%" y="575.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0926%" y="549" width="0.0309%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="0.3426%" y="559.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1 samples, 0.03%)</title><rect x="0.0926%" y="533" width="0.0309%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="0.3426%" y="543.50"></text></g><g><title>spellbook::aff::parser::Lines::advance_line (1 samples, 0.03%)</title><rect x="0.0926%" y="517" width="0.0309%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="0.3426%" y="527.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (1 samples, 0.03%)</title><rect x="0.0926%" y="501" width="0.0309%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="0.3426%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.03%)</title><rect x="0.0926%" y="485" width="0.0309%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="0.3426%" y="495.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.03%)</title><rect x="0.0926%" y="469" width="0.0309%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="0.3426%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0926%" y="453" width="0.0309%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="0.3426%" y="463.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0926%" y="437" width="0.0309%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="0.3426%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0926%" y="421" width="0.0309%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="0.3426%" y="431.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0926%" y="405" width="0.0309%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="0.3426%" y="415.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1 samples, 0.03%)</title><rect x="0.0926%" y="389" width="0.0309%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="0.3426%" y="399.50"></text></g><g><title>codebook::Codebook::get_dictionaries (3 samples, 0.09%)</title><rect x="0.0617%" y="773" width="0.0926%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="3"/><text x="0.3117%" y="783.50"></text></g><g><title>codebook::dictionaries::manager::DictionaryManager::get_dictionary (3 samples, 0.09%)</title><rect x="0.0617%" y="757" width="0.0926%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="3"/><text x="0.3117%" y="767.50"></text></g><g><title>codebook::dictionaries::manager::DictionaryManager::get_hunspell_dictionary (3 samples, 0.09%)</title><rect x="0.0617%" y="741" width="0.0926%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="3"/><text x="0.3117%" y="751.50"></text></g><g><title>codebook::dictionaries::dictionary::HunspellDictionary::new (3 samples, 0.09%)</title><rect x="0.0617%" y="725" width="0.0926%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="3"/><text x="0.3117%" y="735.50"></text></g><g><title>spellbook::Dictionary::new (3 samples, 0.09%)</title><rect x="0.0617%" y="709" width="0.0926%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="3"/><text x="0.3117%" y="719.50"></text></g><g><title>spellbook::Dictionary&lt;S&gt;::new_with_hasher (3 samples, 0.09%)</title><rect x="0.0617%" y="693" width="0.0926%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="3"/><text x="0.3117%" y="703.50"></text></g><g><title>spellbook::aff::parser::parse (3 samples, 0.09%)</title><rect x="0.0617%" y="677" width="0.0926%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="3"/><text x="0.3117%" y="687.50"></text></g><g><title>spellbook::hash_bag::HashBag&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="0.1235%" y="661" width="0.0309%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1"/><text x="0.3735%" y="671.50"></text></g><g><title>spellbook::hash_bag::make_hash (1 samples, 0.03%)</title><rect x="0.1235%" y="645" width="0.0309%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1"/><text x="0.3735%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.19%)</title><rect x="0.1544%" y="741" width="0.1852%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="6"/><text x="0.4044%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.19%)</title><rect x="0.1544%" y="725" width="0.1852%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="6"/><text x="0.4044%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.19%)</title><rect x="0.1544%" y="709" width="0.1852%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="6"/><text x="0.4044%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (6 samples, 0.19%)</title><rect x="0.1544%" y="693" width="0.1852%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="6"/><text x="0.4044%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.19%)</title><rect x="0.1544%" y="677" width="0.1852%" height="15" fill="rgb(225,35,8)" fg:x="5" fg:w="6"/><text x="0.4044%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.19%)</title><rect x="0.1544%" y="661" width="0.1852%" height="15" fill="rgb(250,213,24)" fg:x="5" fg:w="6"/><text x="0.4044%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29 samples, 0.90%)</title><rect x="0.3396%" y="741" width="0.8953%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="29"/><text x="0.5896%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (28 samples, 0.86%)</title><rect x="0.3705%" y="725" width="0.8645%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="28"/><text x="0.6205%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (28 samples, 0.86%)</title><rect x="0.3705%" y="709" width="0.8645%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="28"/><text x="0.6205%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (28 samples, 0.86%)</title><rect x="0.3705%" y="693" width="0.8645%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="28"/><text x="0.6205%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.86%)</title><rect x="0.3705%" y="677" width="0.8645%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="28"/><text x="0.6205%" y="687.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (4 samples, 0.12%)</title><rect x="1.1115%" y="661" width="0.1235%" height="15" fill="rgb(247,81,37)" fg:x="36" fg:w="4"/><text x="1.3615%" y="671.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.03%)</title><rect x="1.2967%" y="597" width="0.0309%" height="15" fill="rgb(209,12,38)" fg:x="42" fg:w="1"/><text x="1.5467%" y="607.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.03%)</title><rect x="1.2967%" y="581" width="0.0309%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="1"/><text x="1.5467%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.03%)</title><rect x="1.2967%" y="565" width="0.0309%" height="15" fill="rgb(248,47,43)" fg:x="42" fg:w="1"/><text x="1.5467%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="1.2967%" y="549" width="0.0309%" height="15" fill="rgb(221,10,30)" fg:x="42" fg:w="1"/><text x="1.5467%" y="559.50"></text></g><g><title>spellbook::aff::ConversionTable::convert (9 samples, 0.28%)</title><rect x="1.2658%" y="677" width="0.2779%" height="15" fill="rgb(210,229,1)" fg:x="41" fg:w="9"/><text x="1.5158%" y="687.50"></text></g><g><title>spellbook::aff::ConversionTable::find_match (9 samples, 0.28%)</title><rect x="1.2658%" y="661" width="0.2779%" height="15" fill="rgb(222,148,37)" fg:x="41" fg:w="9"/><text x="1.5158%" y="671.50"></text></g><g><title>spellbook::aff::Conversion::find (9 samples, 0.28%)</title><rect x="1.2658%" y="645" width="0.2779%" height="15" fill="rgb(234,67,33)" fg:x="41" fg:w="9"/><text x="1.5158%" y="655.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (9 samples, 0.28%)</title><rect x="1.2658%" y="629" width="0.2779%" height="15" fill="rgb(247,98,35)" fg:x="41" fg:w="9"/><text x="1.5158%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (9 samples, 0.28%)</title><rect x="1.2658%" y="613" width="0.2779%" height="15" fill="rgb(247,138,52)" fg:x="41" fg:w="9"/><text x="1.5158%" y="623.50"></text></g><g><title>spellbook::aff::ConversionTable::convert (7 samples, 0.22%)</title><rect x="1.3276%" y="597" width="0.2161%" height="15" fill="rgb(213,79,30)" fg:x="43" fg:w="7"/><text x="1.5776%" y="607.50"></text></g><g><title>spellbook::aff::ConversionTable::find_match (7 samples, 0.22%)</title><rect x="1.3276%" y="581" width="0.2161%" height="15" fill="rgb(246,177,23)" fg:x="43" fg:w="7"/><text x="1.5776%" y="591.50"></text></g><g><title>spellbook::aff::Conversion::find (7 samples, 0.22%)</title><rect x="1.3276%" y="565" width="0.2161%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="7"/><text x="1.5776%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (7 samples, 0.22%)</title><rect x="1.3276%" y="549" width="0.2161%" height="15" fill="rgb(216,154,8)" fg:x="43" fg:w="7"/><text x="1.5776%" y="559.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (7 samples, 0.22%)</title><rect x="1.3276%" y="533" width="0.2161%" height="15" fill="rgb(244,35,45)" fg:x="43" fg:w="7"/><text x="1.5776%" y="543.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound (1 samples, 0.03%)</title><rect x="1.5437%" y="645" width="0.0309%" height="15" fill="rgb(251,115,12)" fg:x="50" fg:w="1"/><text x="1.7937%" y="655.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound_with_rules (1 samples, 0.03%)</title><rect x="1.5437%" y="629" width="0.0309%" height="15" fill="rgb(240,54,50)" fg:x="50" fg:w="1"/><text x="1.7937%" y="639.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound_with_rules_impl (1 samples, 0.03%)</title><rect x="1.5437%" y="613" width="0.0309%" height="15" fill="rgb(233,84,52)" fg:x="50" fg:w="1"/><text x="1.7937%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.03%)</title><rect x="1.5437%" y="597" width="0.0309%" height="15" fill="rgb(207,117,47)" fg:x="50" fg:w="1"/><text x="1.7937%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.03%)</title><rect x="1.5437%" y="581" width="0.0309%" height="15" fill="rgb(249,43,39)" fg:x="50" fg:w="1"/><text x="1.7937%" y="591.50"></text></g><g><title>&lt;spellbook::hash_bag::GetAllIter&lt;Q,K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="1.5437%" y="565" width="0.0309%" height="15" fill="rgb(209,38,44)" fg:x="50" fg:w="1"/><text x="1.7937%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.03%)</title><rect x="1.5437%" y="549" width="0.0309%" height="15" fill="rgb(236,212,23)" fg:x="50" fg:w="1"/><text x="1.7937%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="1.5437%" y="533" width="0.0309%" height="15" fill="rgb(242,79,21)" fg:x="50" fg:w="1"/><text x="1.7937%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.03%)</title><rect x="1.5437%" y="517" width="0.0309%" height="15" fill="rgb(211,96,35)" fg:x="50" fg:w="1"/><text x="1.7937%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="1.5437%" y="501" width="0.0309%" height="15" fill="rgb(253,215,40)" fg:x="50" fg:w="1"/><text x="1.7937%" y="511.50"></text></g><g><title>&lt;hashbrown::table::IterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="1.5746%" y="613" width="0.1235%" height="15" fill="rgb(211,81,21)" fg:x="51" fg:w="4"/><text x="1.8246%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="1.5746%" y="597" width="0.1235%" height="15" fill="rgb(208,190,38)" fg:x="51" fg:w="4"/><text x="1.8246%" y="607.50"></text></g><g><title>&lt;spellbook::hash_bag::GetAllIter&lt;Q,K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.31%)</title><rect x="1.5746%" y="629" width="0.3087%" height="15" fill="rgb(235,213,38)" fg:x="51" fg:w="10"/><text x="1.8246%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (6 samples, 0.19%)</title><rect x="1.6981%" y="613" width="0.1852%" height="15" fill="rgb(237,122,38)" fg:x="55" fg:w="6"/><text x="1.9481%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.19%)</title><rect x="1.6981%" y="597" width="0.1852%" height="15" fill="rgb(244,218,35)" fg:x="55" fg:w="6"/><text x="1.9481%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6 samples, 0.19%)</title><rect x="1.6981%" y="581" width="0.1852%" height="15" fill="rgb(240,68,47)" fg:x="55" fg:w="6"/><text x="1.9481%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.19%)</title><rect x="1.6981%" y="565" width="0.1852%" height="15" fill="rgb(210,16,53)" fg:x="55" fg:w="6"/><text x="1.9481%" y="575.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_simple_word (1 samples, 0.03%)</title><rect x="1.8833%" y="629" width="0.0309%" height="15" fill="rgb(235,124,12)" fg:x="61" fg:w="1"/><text x="2.1333%" y="639.50"></text></g><g><title>&lt;hashbrown::table::IterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="2.0068%" y="597" width="0.1235%" height="15" fill="rgb(224,169,11)" fg:x="65" fg:w="4"/><text x="2.2568%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="2.0068%" y="581" width="0.1235%" height="15" fill="rgb(250,166,2)" fg:x="65" fg:w="4"/><text x="2.2568%" y="591.50"></text></g><g><title>&lt;spellbook::hash_bag::GetAllIter&lt;Q,K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.15%)</title><rect x="2.0068%" y="613" width="0.1544%" height="15" fill="rgb(242,216,29)" fg:x="65" fg:w="5"/><text x="2.2568%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.03%)</title><rect x="2.1303%" y="597" width="0.0309%" height="15" fill="rgb(230,116,27)" fg:x="69" fg:w="1"/><text x="2.3803%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="2.1303%" y="581" width="0.0309%" height="15" fill="rgb(228,99,48)" fg:x="69" fg:w="1"/><text x="2.3803%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.03%)</title><rect x="2.1303%" y="565" width="0.0309%" height="15" fill="rgb(253,11,6)" fg:x="69" fg:w="1"/><text x="2.3803%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="2.1303%" y="549" width="0.0309%" height="15" fill="rgb(247,143,39)" fg:x="69" fg:w="1"/><text x="2.3803%" y="559.50"></text></g><g><title>spellbook::aff::Affix&lt;spellbook::aff::Sfx&gt;::to_stem (1 samples, 0.03%)</title><rect x="2.1612%" y="613" width="0.0309%" height="15" fill="rgb(236,97,10)" fg:x="70" fg:w="1"/><text x="2.4112%" y="623.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.03%)</title><rect x="2.1612%" y="597" width="0.0309%" height="15" fill="rgb(233,208,19)" fg:x="70" fg:w="1"/><text x="2.4112%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="2.1612%" y="581" width="0.0309%" height="15" fill="rgb(216,164,2)" fg:x="70" fg:w="1"/><text x="2.4112%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="2.1612%" y="565" width="0.0309%" height="15" fill="rgb(220,129,5)" fg:x="70" fg:w="1"/><text x="2.4112%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="2.1612%" y="549" width="0.0309%" height="15" fill="rgb(242,17,10)" fg:x="70" fg:w="1"/><text x="2.4112%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="2.1612%" y="533" width="0.0309%" height="15" fill="rgb(242,107,0)" fg:x="70" fg:w="1"/><text x="2.4112%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="2.1612%" y="517" width="0.0309%" height="15" fill="rgb(251,28,31)" fg:x="70" fg:w="1"/><text x="2.4112%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.03%)</title><rect x="2.1612%" y="501" width="0.0309%" height="15" fill="rgb(233,223,10)" fg:x="70" fg:w="1"/><text x="2.4112%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="2.1612%" y="485" width="0.0309%" height="15" fill="rgb(215,21,27)" fg:x="70" fg:w="1"/><text x="2.4112%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="2.1612%" y="469" width="0.0309%" height="15" fill="rgb(232,23,21)" fg:x="70" fg:w="1"/><text x="2.4112%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="2.1612%" y="453" width="0.0309%" height="15" fill="rgb(244,5,23)" fg:x="70" fg:w="1"/><text x="2.4112%" y="463.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_simple_word (22 samples, 0.68%)</title><rect x="1.5746%" y="645" width="0.6792%" height="15" fill="rgb(226,81,46)" fg:x="51" fg:w="22"/><text x="1.8246%" y="655.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::strip_suffix_only (11 samples, 0.34%)</title><rect x="1.9142%" y="629" width="0.3396%" height="15" fill="rgb(247,70,30)" fg:x="62" fg:w="11"/><text x="2.1642%" y="639.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_simple_word (2 samples, 0.06%)</title><rect x="2.1920%" y="613" width="0.0617%" height="15" fill="rgb(212,68,19)" fg:x="71" fg:w="2"/><text x="2.4420%" y="623.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::strip_suffix_only (2 samples, 0.06%)</title><rect x="2.1920%" y="597" width="0.0617%" height="15" fill="rgb(240,187,13)" fg:x="71" fg:w="2"/><text x="2.4420%" y="607.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::do_spell_break (2 samples, 0.06%)</title><rect x="2.2538%" y="645" width="0.0617%" height="15" fill="rgb(223,113,26)" fg:x="73" fg:w="2"/><text x="2.5038%" y="655.50"></text></g><g><title>&lt;hashbrown::table::IterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="2.3155%" y="517" width="0.0617%" height="15" fill="rgb(206,192,2)" fg:x="75" fg:w="2"/><text x="2.5655%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="2.3155%" y="501" width="0.0617%" height="15" fill="rgb(241,108,4)" fg:x="75" fg:w="2"/><text x="2.5655%" y="511.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound (4 samples, 0.12%)</title><rect x="2.3155%" y="613" width="0.1235%" height="15" fill="rgb(247,173,49)" fg:x="75" fg:w="4"/><text x="2.5655%" y="623.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound_with_rules (4 samples, 0.12%)</title><rect x="2.3155%" y="597" width="0.1235%" height="15" fill="rgb(224,114,35)" fg:x="75" fg:w="4"/><text x="2.5655%" y="607.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound_with_rules_impl (4 samples, 0.12%)</title><rect x="2.3155%" y="581" width="0.1235%" height="15" fill="rgb(245,159,27)" fg:x="75" fg:w="4"/><text x="2.5655%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (4 samples, 0.12%)</title><rect x="2.3155%" y="565" width="0.1235%" height="15" fill="rgb(245,172,44)" fg:x="75" fg:w="4"/><text x="2.5655%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.12%)</title><rect x="2.3155%" y="549" width="0.1235%" height="15" fill="rgb(236,23,11)" fg:x="75" fg:w="4"/><text x="2.5655%" y="559.50"></text></g><g><title>&lt;spellbook::hash_bag::GetAllIter&lt;Q,K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="2.3155%" y="533" width="0.1235%" height="15" fill="rgb(205,117,38)" fg:x="75" fg:w="4"/><text x="2.5655%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.06%)</title><rect x="2.3773%" y="517" width="0.0617%" height="15" fill="rgb(237,72,25)" fg:x="77" fg:w="2"/><text x="2.6273%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="2.3773%" y="501" width="0.0617%" height="15" fill="rgb(244,70,9)" fg:x="77" fg:w="2"/><text x="2.6273%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2 samples, 0.06%)</title><rect x="2.3773%" y="485" width="0.0617%" height="15" fill="rgb(217,125,39)" fg:x="77" fg:w="2"/><text x="2.6273%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.06%)</title><rect x="2.3773%" y="469" width="0.0617%" height="15" fill="rgb(235,36,10)" fg:x="77" fg:w="2"/><text x="2.6273%" y="479.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::strip_prefix_then_suffix_commutative (1 samples, 0.03%)</title><rect x="2.4390%" y="597" width="0.0309%" height="15" fill="rgb(251,123,47)" fg:x="79" fg:w="1"/><text x="2.6890%" y="607.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_simple_word (1 samples, 0.03%)</title><rect x="2.4390%" y="581" width="0.0309%" height="15" fill="rgb(221,13,13)" fg:x="79" fg:w="1"/><text x="2.6890%" y="591.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::strip_prefix_then_suffix_commutative (1 samples, 0.03%)</title><rect x="2.4390%" y="565" width="0.0309%" height="15" fill="rgb(238,131,9)" fg:x="79" fg:w="1"/><text x="2.6890%" y="575.50"></text></g><g><title>spellbook::Dictionary&lt;S&gt;::check (40 samples, 1.23%)</title><rect x="1.2658%" y="709" width="1.2349%" height="15" fill="rgb(211,50,8)" fg:x="41" fg:w="40"/><text x="1.5158%" y="719.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check (40 samples, 1.23%)</title><rect x="1.2658%" y="693" width="1.2349%" height="15" fill="rgb(245,182,24)" fg:x="41" fg:w="40"/><text x="1.5158%" y="703.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::spell_break (31 samples, 0.96%)</title><rect x="1.5437%" y="677" width="0.9571%" height="15" fill="rgb(242,14,37)" fg:x="50" fg:w="31"/><text x="1.7937%" y="687.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::do_spell_break (31 samples, 0.96%)</title><rect x="1.5437%" y="661" width="0.9571%" height="15" fill="rgb(246,228,12)" fg:x="50" fg:w="31"/><text x="1.7937%" y="671.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::spell_casing_title (6 samples, 0.19%)</title><rect x="2.3155%" y="645" width="0.1852%" height="15" fill="rgb(213,55,15)" fg:x="75" fg:w="6"/><text x="2.5655%" y="655.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_word (6 samples, 0.19%)</title><rect x="2.3155%" y="629" width="0.1852%" height="15" fill="rgb(209,9,3)" fg:x="75" fg:w="6"/><text x="2.5655%" y="639.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_simple_word (2 samples, 0.06%)</title><rect x="2.4390%" y="613" width="0.0617%" height="15" fill="rgb(230,59,30)" fg:x="79" fg:w="2"/><text x="2.6890%" y="623.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::strip_suffix_only (1 samples, 0.03%)</title><rect x="2.4699%" y="597" width="0.0309%" height="15" fill="rgb(209,121,21)" fg:x="80" fg:w="1"/><text x="2.7199%" y="607.50"></text></g><g><title>spellbook::aff::Affix&lt;spellbook::aff::Sfx&gt;::to_stem (1 samples, 0.03%)</title><rect x="2.4699%" y="581" width="0.0309%" height="15" fill="rgb(220,109,13)" fg:x="80" fg:w="1"/><text x="2.7199%" y="591.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.03%)</title><rect x="2.4699%" y="565" width="0.0309%" height="15" fill="rgb(232,18,1)" fg:x="80" fg:w="1"/><text x="2.7199%" y="575.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.03%)</title><rect x="2.4699%" y="549" width="0.0309%" height="15" fill="rgb(215,41,42)" fg:x="80" fg:w="1"/><text x="2.7199%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.03%)</title><rect x="2.4699%" y="533" width="0.0309%" height="15" fill="rgb(224,123,36)" fg:x="80" fg:w="1"/><text x="2.7199%" y="543.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.03%)</title><rect x="2.4699%" y="517" width="0.0309%" height="15" fill="rgb(240,125,3)" fg:x="80" fg:w="1"/><text x="2.7199%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.03%)</title><rect x="2.4699%" y="501" width="0.0309%" height="15" fill="rgb(205,98,50)" fg:x="80" fg:w="1"/><text x="2.7199%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.4699%" y="485" width="0.0309%" height="15" fill="rgb(205,185,37)" fg:x="80" fg:w="1"/><text x="2.7199%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="2.4699%" y="469" width="0.0309%" height="15" fill="rgb(238,207,15)" fg:x="80" fg:w="1"/><text x="2.7199%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.4699%" y="453" width="0.0309%" height="15" fill="rgb(213,199,42)" fg:x="80" fg:w="1"/><text x="2.7199%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.4699%" y="437" width="0.0309%" height="15" fill="rgb(235,201,11)" fg:x="80" fg:w="1"/><text x="2.7199%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.4699%" y="421" width="0.0309%" height="15" fill="rgb(207,46,11)" fg:x="80" fg:w="1"/><text x="2.7199%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.4699%" y="405" width="0.0309%" height="15" fill="rgb(241,35,35)" fg:x="80" fg:w="1"/><text x="2.7199%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="2.4699%" y="389" width="0.0309%" height="15" fill="rgb(243,32,47)" fg:x="80" fg:w="1"/><text x="2.7199%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="2.4699%" y="373" width="0.0309%" height="15" fill="rgb(247,202,23)" fg:x="80" fg:w="1"/><text x="2.7199%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="2.4699%" y="357" width="0.0309%" height="15" fill="rgb(219,102,11)" fg:x="80" fg:w="1"/><text x="2.7199%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="2.4699%" y="341" width="0.0309%" height="15" fill="rgb(243,110,44)" fg:x="80" fg:w="1"/><text x="2.7199%" y="351.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.03%)</title><rect x="2.4699%" y="325" width="0.0309%" height="15" fill="rgb(222,74,54)" fg:x="80" fg:w="1"/><text x="2.7199%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="2.4699%" y="309" width="0.0309%" height="15" fill="rgb(216,99,12)" fg:x="80" fg:w="1"/><text x="2.7199%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="2.5316%" y="645" width="0.0309%" height="15" fill="rgb(226,22,26)" fg:x="82" fg:w="1"/><text x="2.7816%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="2.5316%" y="629" width="0.0309%" height="15" fill="rgb(217,163,10)" fg:x="82" fg:w="1"/><text x="2.7816%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="2.5316%" y="613" width="0.0309%" height="15" fill="rgb(213,25,53)" fg:x="82" fg:w="1"/><text x="2.7816%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="2.5316%" y="597" width="0.0309%" height="15" fill="rgb(252,105,26)" fg:x="82" fg:w="1"/><text x="2.7816%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.03%)</title><rect x="2.5316%" y="581" width="0.0309%" height="15" fill="rgb(220,39,43)" fg:x="82" fg:w="1"/><text x="2.7816%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="2.5316%" y="565" width="0.0309%" height="15" fill="rgb(229,68,48)" fg:x="82" fg:w="1"/><text x="2.7816%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="2.5316%" y="549" width="0.0309%" height="15" fill="rgb(252,8,32)" fg:x="82" fg:w="1"/><text x="2.7816%" y="559.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.03%)</title><rect x="2.5316%" y="533" width="0.0309%" height="15" fill="rgb(223,20,43)" fg:x="82" fg:w="1"/><text x="2.7816%" y="543.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="2.5316%" y="517" width="0.0309%" height="15" fill="rgb(229,81,49)" fg:x="82" fg:w="1"/><text x="2.7816%" y="527.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::spell_casing_title (1 samples, 0.03%)</title><rect x="2.5316%" y="501" width="0.0309%" height="15" fill="rgb(236,28,36)" fg:x="82" fg:w="1"/><text x="2.7816%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="2.5316%" y="485" width="0.0309%" height="15" fill="rgb(249,185,26)" fg:x="82" fg:w="1"/><text x="2.7816%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="2.5316%" y="469" width="0.0309%" height="15" fill="rgb(249,174,33)" fg:x="82" fg:w="1"/><text x="2.7816%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="2.5316%" y="453" width="0.0309%" height="15" fill="rgb(233,201,37)" fg:x="82" fg:w="1"/><text x="2.7816%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="2.5316%" y="437" width="0.0309%" height="15" fill="rgb(221,78,26)" fg:x="82" fg:w="1"/><text x="2.7816%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.03%)</title><rect x="2.5316%" y="421" width="0.0309%" height="15" fill="rgb(250,127,30)" fg:x="82" fg:w="1"/><text x="2.7816%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="2.5316%" y="405" width="0.0309%" height="15" fill="rgb(230,49,44)" fg:x="82" fg:w="1"/><text x="2.7816%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="2.5316%" y="389" width="0.0309%" height="15" fill="rgb(229,67,23)" fg:x="82" fg:w="1"/><text x="2.7816%" y="399.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.03%)</title><rect x="2.5316%" y="373" width="0.0309%" height="15" fill="rgb(249,83,47)" fg:x="82" fg:w="1"/><text x="2.7816%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="2.5316%" y="357" width="0.0309%" height="15" fill="rgb(215,43,3)" fg:x="82" fg:w="1"/><text x="2.7816%" y="367.50"></text></g><g><title>&lt;hashbrown::table::IterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="2.5625%" y="533" width="0.0617%" height="15" fill="rgb(238,154,13)" fg:x="83" fg:w="2"/><text x="2.8125%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="2.5625%" y="517" width="0.0617%" height="15" fill="rgb(219,56,2)" fg:x="83" fg:w="2"/><text x="2.8125%" y="527.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound (3 samples, 0.09%)</title><rect x="2.5625%" y="629" width="0.0926%" height="15" fill="rgb(233,0,4)" fg:x="83" fg:w="3"/><text x="2.8125%" y="639.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound_with_rules (3 samples, 0.09%)</title><rect x="2.5625%" y="613" width="0.0926%" height="15" fill="rgb(235,30,7)" fg:x="83" fg:w="3"/><text x="2.8125%" y="623.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_compound_with_rules_impl (3 samples, 0.09%)</title><rect x="2.5625%" y="597" width="0.0926%" height="15" fill="rgb(250,79,13)" fg:x="83" fg:w="3"/><text x="2.8125%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.09%)</title><rect x="2.5625%" y="581" width="0.0926%" height="15" fill="rgb(211,146,34)" fg:x="83" fg:w="3"/><text x="2.8125%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.09%)</title><rect x="2.5625%" y="565" width="0.0926%" height="15" fill="rgb(228,22,38)" fg:x="83" fg:w="3"/><text x="2.8125%" y="575.50"></text></g><g><title>&lt;spellbook::hash_bag::GetAllIter&lt;Q,K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="2.5625%" y="549" width="0.0926%" height="15" fill="rgb(235,168,5)" fg:x="83" fg:w="3"/><text x="2.8125%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.03%)</title><rect x="2.6243%" y="533" width="0.0309%" height="15" fill="rgb(221,155,16)" fg:x="85" fg:w="1"/><text x="2.8743%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="2.6243%" y="517" width="0.0309%" height="15" fill="rgb(215,215,53)" fg:x="85" fg:w="1"/><text x="2.8743%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.03%)</title><rect x="2.6243%" y="501" width="0.0309%" height="15" fill="rgb(223,4,10)" fg:x="85" fg:w="1"/><text x="2.8743%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="2.6243%" y="485" width="0.0309%" height="15" fill="rgb(234,103,6)" fg:x="85" fg:w="1"/><text x="2.8743%" y="495.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::strip_prefix_only (1 samples, 0.03%)</title><rect x="2.6551%" y="613" width="0.0309%" height="15" fill="rgb(227,97,0)" fg:x="86" fg:w="1"/><text x="2.9051%" y="623.50"></text></g><g><title>&lt;spellbook::hash_bag::GetAllIter&lt;Q,K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="2.6860%" y="597" width="0.0617%" height="15" fill="rgb(234,150,53)" fg:x="87" fg:w="2"/><text x="2.9360%" y="607.50"></text></g><g><title>&lt;hashbrown::table::IterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="2.6860%" y="581" width="0.0617%" height="15" fill="rgb(228,201,54)" fg:x="87" fg:w="2"/><text x="2.9360%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="2.6860%" y="565" width="0.0617%" height="15" fill="rgb(222,22,37)" fg:x="87" fg:w="2"/><text x="2.9360%" y="575.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.03%)</title><rect x="2.7478%" y="581" width="0.0309%" height="15" fill="rgb(237,53,32)" fg:x="89" fg:w="1"/><text x="2.9978%" y="591.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.03%)</title><rect x="2.7478%" y="565" width="0.0309%" height="15" fill="rgb(233,25,53)" fg:x="89" fg:w="1"/><text x="2.9978%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.03%)</title><rect x="2.7478%" y="549" width="0.0309%" height="15" fill="rgb(210,40,34)" fg:x="89" fg:w="1"/><text x="2.9978%" y="559.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.03%)</title><rect x="2.7478%" y="533" width="0.0309%" height="15" fill="rgb(241,220,44)" fg:x="89" fg:w="1"/><text x="2.9978%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.03%)</title><rect x="2.7478%" y="517" width="0.0309%" height="15" fill="rgb(235,28,35)" fg:x="89" fg:w="1"/><text x="2.9978%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.7478%" y="501" width="0.0309%" height="15" fill="rgb(210,56,17)" fg:x="89" fg:w="1"/><text x="2.9978%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="2.7478%" y="485" width="0.0309%" height="15" fill="rgb(224,130,29)" fg:x="89" fg:w="1"/><text x="2.9978%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.7478%" y="469" width="0.0309%" height="15" fill="rgb(235,212,8)" fg:x="89" fg:w="1"/><text x="2.9978%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.7478%" y="453" width="0.0309%" height="15" fill="rgb(223,33,50)" fg:x="89" fg:w="1"/><text x="2.9978%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.7478%" y="437" width="0.0309%" height="15" fill="rgb(219,149,13)" fg:x="89" fg:w="1"/><text x="2.9978%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.7478%" y="421" width="0.0309%" height="15" fill="rgb(250,156,29)" fg:x="89" fg:w="1"/><text x="2.9978%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="2.7478%" y="405" width="0.0309%" height="15" fill="rgb(216,193,19)" fg:x="89" fg:w="1"/><text x="2.9978%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="2.7478%" y="389" width="0.0309%" height="15" fill="rgb(216,135,14)" fg:x="89" fg:w="1"/><text x="2.9978%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="2.7478%" y="373" width="0.0309%" height="15" fill="rgb(241,47,5)" fg:x="89" fg:w="1"/><text x="2.9978%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="2.7478%" y="357" width="0.0309%" height="15" fill="rgb(233,42,35)" fg:x="89" fg:w="1"/><text x="2.9978%" y="367.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.03%)</title><rect x="2.7478%" y="341" width="0.0309%" height="15" fill="rgb(231,13,6)" fg:x="89" fg:w="1"/><text x="2.9978%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="2.7478%" y="325" width="0.0309%" height="15" fill="rgb(207,181,40)" fg:x="89" fg:w="1"/><text x="2.9978%" y="335.50"></text></g><g><title>spellbook::aff::Affix&lt;spellbook::aff::Sfx&gt;::to_stem (1 samples, 0.03%)</title><rect x="2.7478%" y="309" width="0.0309%" height="15" fill="rgb(254,173,49)" fg:x="89" fg:w="1"/><text x="2.9978%" y="319.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.03%)</title><rect x="2.7478%" y="293" width="0.0309%" height="15" fill="rgb(221,1,38)" fg:x="89" fg:w="1"/><text x="2.9978%" y="303.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.03%)</title><rect x="2.7478%" y="277" width="0.0309%" height="15" fill="rgb(206,124,46)" fg:x="89" fg:w="1"/><text x="2.9978%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.03%)</title><rect x="2.7478%" y="261" width="0.0309%" height="15" fill="rgb(249,21,11)" fg:x="89" fg:w="1"/><text x="2.9978%" y="271.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.03%)</title><rect x="2.7478%" y="245" width="0.0309%" height="15" fill="rgb(222,201,40)" fg:x="89" fg:w="1"/><text x="2.9978%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.03%)</title><rect x="2.7478%" y="229" width="0.0309%" height="15" fill="rgb(235,61,29)" fg:x="89" fg:w="1"/><text x="2.9978%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.7478%" y="213" width="0.0309%" height="15" fill="rgb(219,207,3)" fg:x="89" fg:w="1"/><text x="2.9978%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="2.7478%" y="197" width="0.0309%" height="15" fill="rgb(222,56,46)" fg:x="89" fg:w="1"/><text x="2.9978%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.7478%" y="181" width="0.0309%" height="15" fill="rgb(239,76,54)" fg:x="89" fg:w="1"/><text x="2.9978%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.7478%" y="165" width="0.0309%" height="15" fill="rgb(231,124,27)" fg:x="89" fg:w="1"/><text x="2.9978%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.7478%" y="149" width="0.0309%" height="15" fill="rgb(249,195,6)" fg:x="89" fg:w="1"/><text x="2.9978%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.7478%" y="133" width="0.0309%" height="15" fill="rgb(237,174,47)" fg:x="89" fg:w="1"/><text x="2.9978%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="2.7478%" y="117" width="0.0309%" height="15" fill="rgb(206,201,31)" fg:x="89" fg:w="1"/><text x="2.9978%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="2.7478%" y="101" width="0.0309%" height="15" fill="rgb(231,57,52)" fg:x="89" fg:w="1"/><text x="2.9978%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="2.7478%" y="85" width="0.0309%" height="15" fill="rgb(248,177,22)" fg:x="89" fg:w="1"/><text x="2.9978%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="2.7478%" y="69" width="0.0309%" height="15" fill="rgb(215,211,37)" fg:x="89" fg:w="1"/><text x="2.9978%" y="79.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.03%)</title><rect x="2.7478%" y="53" width="0.0309%" height="15" fill="rgb(241,128,51)" fg:x="89" fg:w="1"/><text x="2.9978%" y="63.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="2.7478%" y="37" width="0.0309%" height="15" fill="rgb(227,165,31)" fg:x="89" fg:w="1"/><text x="2.9978%" y="47.50"></text></g><g><title>spellbook::aff::Affix&lt;spellbook::aff::Sfx&gt;::to_stem (2 samples, 0.06%)</title><rect x="2.7478%" y="597" width="0.0617%" height="15" fill="rgb(228,167,24)" fg:x="89" fg:w="2"/><text x="2.9978%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1 samples, 0.03%)</title><rect x="2.7786%" y="581" width="0.0309%" height="15" fill="rgb(228,143,12)" fg:x="90" fg:w="1"/><text x="3.0286%" y="591.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1 samples, 0.03%)</title><rect x="2.7786%" y="565" width="0.0309%" height="15" fill="rgb(249,149,8)" fg:x="90" fg:w="1"/><text x="3.0286%" y="575.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1 samples, 0.03%)</title><rect x="2.7786%" y="549" width="0.0309%" height="15" fill="rgb(243,35,44)" fg:x="90" fg:w="1"/><text x="3.0286%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1 samples, 0.03%)</title><rect x="2.7786%" y="533" width="0.0309%" height="15" fill="rgb(246,89,9)" fg:x="90" fg:w="1"/><text x="3.0286%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="2.7786%" y="517" width="0.0309%" height="15" fill="rgb(233,213,13)" fg:x="90" fg:w="1"/><text x="3.0286%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.03%)</title><rect x="2.7786%" y="501" width="0.0309%" height="15" fill="rgb(233,141,41)" fg:x="90" fg:w="1"/><text x="3.0286%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="2.7786%" y="485" width="0.0309%" height="15" fill="rgb(239,167,4)" fg:x="90" fg:w="1"/><text x="3.0286%" y="495.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::spell_casing_title (10 samples, 0.31%)</title><rect x="2.5316%" y="661" width="0.3087%" height="15" fill="rgb(209,217,16)" fg:x="82" fg:w="10"/><text x="2.7816%" y="671.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_word (9 samples, 0.28%)</title><rect x="2.5625%" y="645" width="0.2779%" height="15" fill="rgb(219,88,35)" fg:x="83" fg:w="9"/><text x="2.8125%" y="655.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_simple_word (6 samples, 0.19%)</title><rect x="2.6551%" y="629" width="0.1852%" height="15" fill="rgb(220,193,23)" fg:x="86" fg:w="6"/><text x="2.9051%" y="639.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::strip_suffix_only (5 samples, 0.15%)</title><rect x="2.6860%" y="613" width="0.1544%" height="15" fill="rgb(230,90,52)" fg:x="87" fg:w="5"/><text x="2.9360%" y="623.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check_simple_word (1 samples, 0.03%)</title><rect x="2.8095%" y="597" width="0.0309%" height="15" fill="rgb(252,106,19)" fg:x="91" fg:w="1"/><text x="3.0595%" y="607.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::strip_suffix_only (1 samples, 0.03%)</title><rect x="2.8095%" y="581" width="0.0309%" height="15" fill="rgb(206,74,20)" fg:x="91" fg:w="1"/><text x="3.0595%" y="591.50"></text></g><g><title>&lt;codebook::dictionaries::dictionary::HunspellDictionary as codebook::dictionaries::dictionary::Dictionary&gt;::check (53 samples, 1.64%)</title><rect x="1.2658%" y="725" width="1.6363%" height="15" fill="rgb(230,138,44)" fg:x="41" fg:w="53"/><text x="1.5158%" y="735.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::check (13 samples, 0.40%)</title><rect x="2.5008%" y="709" width="0.4014%" height="15" fill="rgb(235,182,43)" fg:x="81" fg:w="13"/><text x="2.7508%" y="719.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::spell_break (13 samples, 0.40%)</title><rect x="2.5008%" y="693" width="0.4014%" height="15" fill="rgb(242,16,51)" fg:x="81" fg:w="13"/><text x="2.7508%" y="703.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::do_spell_break (13 samples, 0.40%)</title><rect x="2.5008%" y="677" width="0.4014%" height="15" fill="rgb(248,9,4)" fg:x="81" fg:w="13"/><text x="2.7508%" y="687.50"></text></g><g><title>spellbook::checker::Checker&lt;S&gt;::spell_casing_upper (2 samples, 0.06%)</title><rect x="2.8404%" y="661" width="0.0617%" height="15" fill="rgb(210,31,22)" fg:x="92" fg:w="2"/><text x="3.0904%" y="671.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.06%)</title><rect x="2.8404%" y="645" width="0.0617%" height="15" fill="rgb(239,54,39)" fg:x="92" fg:w="2"/><text x="3.0904%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="2.8404%" y="629" width="0.0617%" height="15" fill="rgb(230,99,41)" fg:x="92" fg:w="2"/><text x="3.0904%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="2.8404%" y="613" width="0.0617%" height="15" fill="rgb(253,106,12)" fg:x="92" fg:w="2"/><text x="3.0904%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="2.8404%" y="597" width="0.0617%" height="15" fill="rgb(213,46,41)" fg:x="92" fg:w="2"/><text x="3.0904%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.06%)</title><rect x="2.8404%" y="581" width="0.0617%" height="15" fill="rgb(215,133,35)" fg:x="92" fg:w="2"/><text x="3.0904%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.06%)</title><rect x="2.8404%" y="565" width="0.0617%" height="15" fill="rgb(213,28,5)" fg:x="92" fg:w="2"/><text x="3.0904%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2 samples, 0.06%)</title><rect x="2.8404%" y="549" width="0.0617%" height="15" fill="rgb(215,77,49)" fg:x="92" fg:w="2"/><text x="3.0904%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.06%)</title><rect x="2.8404%" y="533" width="0.0617%" height="15" fill="rgb(248,100,22)" fg:x="92" fg:w="2"/><text x="3.0904%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="2.8404%" y="517" width="0.0617%" height="15" fill="rgb(208,67,9)" fg:x="92" fg:w="2"/><text x="3.0904%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="2.8404%" y="501" width="0.0617%" height="15" fill="rgb(219,133,21)" fg:x="92" fg:w="2"/><text x="3.0904%" y="511.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_ascii_lowercase (12 samples, 0.37%)</title><rect x="2.9021%" y="709" width="0.3705%" height="15" fill="rgb(246,46,29)" fg:x="94" fg:w="12"/><text x="3.1521%" y="719.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (12 samples, 0.37%)</title><rect x="2.9021%" y="693" width="0.3705%" height="15" fill="rgb(246,185,52)" fg:x="94" fg:w="12"/><text x="3.1521%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12 samples, 0.37%)</title><rect x="2.9021%" y="677" width="0.3705%" height="15" fill="rgb(252,136,11)" fg:x="94" fg:w="12"/><text x="3.1521%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.37%)</title><rect x="2.9021%" y="661" width="0.3705%" height="15" fill="rgb(219,138,53)" fg:x="94" fg:w="12"/><text x="3.1521%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.37%)</title><rect x="2.9021%" y="645" width="0.3705%" height="15" fill="rgb(211,51,23)" fg:x="94" fg:w="12"/><text x="3.1521%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (12 samples, 0.37%)</title><rect x="2.9021%" y="629" width="0.3705%" height="15" fill="rgb(247,221,28)" fg:x="94" fg:w="12"/><text x="3.1521%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.37%)</title><rect x="2.9021%" y="613" width="0.3705%" height="15" fill="rgb(251,222,45)" fg:x="94" fg:w="12"/><text x="3.1521%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.37%)</title><rect x="2.9021%" y="597" width="0.3705%" height="15" fill="rgb(217,162,53)" fg:x="94" fg:w="12"/><text x="3.1521%" y="607.50"></text></g><g><title>&lt;codebook::dictionaries::dictionary::TextDictionary as codebook::dictionaries::dictionary::Dictionary&gt;::check (584 samples, 18.03%)</title><rect x="2.9021%" y="725" width="18.0303%" height="15" fill="rgb(229,93,14)" fg:x="94" fg:w="584"/><text x="3.1521%" y="735.50">&lt;codebook::dictionaries::dic..</text></g><g><title>alloc::string::&lt;impl core::cmp::PartialEq&lt;alloc::string::String&gt; for &amp;str&gt;::eq (572 samples, 17.66%)</title><rect x="3.2726%" y="709" width="17.6598%" height="15" fill="rgb(209,67,49)" fg:x="106" fg:w="572"/><text x="3.5226%" y="719.50">alloc::string::&lt;impl core::..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (572 samples, 17.66%)</title><rect x="3.2726%" y="693" width="17.6598%" height="15" fill="rgb(213,87,29)" fg:x="106" fg:w="572"/><text x="3.5226%" y="703.50">core::str::traits::&lt;impl co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (572 samples, 17.66%)</title><rect x="3.2726%" y="677" width="17.6598%" height="15" fill="rgb(205,151,52)" fg:x="106" fg:w="572"/><text x="3.5226%" y="687.50">core::cmp::impls::&lt;impl cor..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (572 samples, 17.66%)</title><rect x="3.2726%" y="661" width="17.6598%" height="15" fill="rgb(253,215,39)" fg:x="106" fg:w="572"/><text x="3.5226%" y="671.50">core::slice::cmp::&lt;impl cor..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (572 samples, 17.66%)</title><rect x="3.2726%" y="645" width="17.6598%" height="15" fill="rgb(221,220,41)" fg:x="106" fg:w="572"/><text x="3.5226%" y="655.50">&lt;[A] as core::slice::cmp::S..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="20.9324%" y="613" width="0.0926%" height="15" fill="rgb(218,133,21)" fg:x="678" fg:w="3"/><text x="21.1824%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="20.9324%" y="597" width="0.0926%" height="15" fill="rgb(221,193,43)" fg:x="678" fg:w="3"/><text x="21.1824%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="20.9324%" y="581" width="0.0926%" height="15" fill="rgb(240,128,52)" fg:x="678" fg:w="3"/><text x="21.1824%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3 samples, 0.09%)</title><rect x="20.9324%" y="565" width="0.0926%" height="15" fill="rgb(253,114,12)" fg:x="678" fg:w="3"/><text x="21.1824%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="20.9324%" y="549" width="0.0926%" height="15" fill="rgb(215,223,47)" fg:x="678" fg:w="3"/><text x="21.1824%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="20.9324%" y="533" width="0.0926%" height="15" fill="rgb(248,225,23)" fg:x="678" fg:w="3"/><text x="21.1824%" y="543.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="20.9324%" y="517" width="0.0926%" height="15" fill="rgb(250,108,0)" fg:x="678" fg:w="3"/><text x="21.1824%" y="527.50"></text></g><g><title>__rustc::__rdl_alloc (3 samples, 0.09%)</title><rect x="20.9324%" y="501" width="0.0926%" height="15" fill="rgb(228,208,7)" fg:x="678" fg:w="3"/><text x="21.1824%" y="511.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="20.9324%" y="485" width="0.0926%" height="15" fill="rgb(244,45,10)" fg:x="678" fg:w="3"/><text x="21.1824%" y="495.50"></text></g><g><title>codebook_config::CodebookConfig::is_allowed_word (2 samples, 0.06%)</title><rect x="20.9633%" y="469" width="0.0617%" height="15" fill="rgb(207,125,25)" fg:x="679" fg:w="2"/><text x="21.2133%" y="479.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_ascii_lowercase (2 samples, 0.06%)</title><rect x="20.9633%" y="453" width="0.0617%" height="15" fill="rgb(210,195,18)" fg:x="679" fg:w="2"/><text x="21.2133%" y="463.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.06%)</title><rect x="20.9633%" y="437" width="0.0617%" height="15" fill="rgb(249,80,12)" fg:x="679" fg:w="2"/><text x="21.2133%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.06%)</title><rect x="20.9633%" y="421" width="0.0617%" height="15" fill="rgb(221,65,9)" fg:x="679" fg:w="2"/><text x="21.2133%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.06%)</title><rect x="20.9633%" y="405" width="0.0617%" height="15" fill="rgb(235,49,36)" fg:x="679" fg:w="2"/><text x="21.2133%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.06%)</title><rect x="20.9633%" y="389" width="0.0617%" height="15" fill="rgb(225,32,20)" fg:x="679" fg:w="2"/><text x="21.2133%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2 samples, 0.06%)</title><rect x="20.9633%" y="373" width="0.0617%" height="15" fill="rgb(215,141,46)" fg:x="679" fg:w="2"/><text x="21.2133%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="20.9633%" y="357" width="0.0617%" height="15" fill="rgb(250,160,47)" fg:x="679" fg:w="2"/><text x="21.2133%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="20.9633%" y="341" width="0.0617%" height="15" fill="rgb(216,222,40)" fg:x="679" fg:w="2"/><text x="21.2133%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="20.9633%" y="325" width="0.0617%" height="15" fill="rgb(234,217,39)" fg:x="679" fg:w="2"/><text x="21.2133%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.06%)</title><rect x="20.9633%" y="309" width="0.0617%" height="15" fill="rgb(207,178,40)" fg:x="679" fg:w="2"/><text x="21.2133%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.06%)</title><rect x="20.9633%" y="293" width="0.0617%" height="15" fill="rgb(221,136,13)" fg:x="679" fg:w="2"/><text x="21.2133%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.06%)</title><rect x="20.9633%" y="277" width="0.0617%" height="15" fill="rgb(249,199,10)" fg:x="679" fg:w="2"/><text x="21.2133%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.06%)</title><rect x="20.9633%" y="261" width="0.0617%" height="15" fill="rgb(249,222,13)" fg:x="679" fg:w="2"/><text x="21.2133%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.06%)</title><rect x="20.9633%" y="245" width="0.0617%" height="15" fill="rgb(244,185,38)" fg:x="679" fg:w="2"/><text x="21.2133%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.06%)</title><rect x="20.9633%" y="229" width="0.0617%" height="15" fill="rgb(236,202,9)" fg:x="679" fg:w="2"/><text x="21.2133%" y="239.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_ascii_lowercase (6 samples, 0.19%)</title><rect x="20.9324%" y="709" width="0.1852%" height="15" fill="rgb(250,229,37)" fg:x="678" fg:w="6"/><text x="21.1824%" y="719.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (6 samples, 0.19%)</title><rect x="20.9324%" y="693" width="0.1852%" height="15" fill="rgb(206,174,23)" fg:x="678" fg:w="6"/><text x="21.1824%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (6 samples, 0.19%)</title><rect x="20.9324%" y="677" width="0.1852%" height="15" fill="rgb(211,33,43)" fg:x="678" fg:w="6"/><text x="21.1824%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.19%)</title><rect x="20.9324%" y="661" width="0.1852%" height="15" fill="rgb(245,58,50)" fg:x="678" fg:w="6"/><text x="21.1824%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.19%)</title><rect x="20.9324%" y="645" width="0.1852%" height="15" fill="rgb(244,68,36)" fg:x="678" fg:w="6"/><text x="21.1824%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (6 samples, 0.19%)</title><rect x="20.9324%" y="629" width="0.1852%" height="15" fill="rgb(232,229,15)" fg:x="678" fg:w="6"/><text x="21.1824%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.09%)</title><rect x="21.0250%" y="613" width="0.0926%" height="15" fill="rgb(254,30,23)" fg:x="681" fg:w="3"/><text x="21.2750%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="21.0250%" y="597" width="0.0926%" height="15" fill="rgb(235,160,14)" fg:x="681" fg:w="3"/><text x="21.2750%" y="607.50"></text></g><g><title>codebook_config::CodebookConfig::is_allowed_word (7 samples, 0.22%)</title><rect x="20.9324%" y="725" width="0.2161%" height="15" fill="rgb(212,155,44)" fg:x="678" fg:w="7"/><text x="21.1824%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="21.1176%" y="709" width="0.0309%" height="15" fill="rgb(226,2,50)" fg:x="684" fg:w="1"/><text x="21.3676%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="21.1176%" y="693" width="0.0309%" height="15" fill="rgb(234,177,6)" fg:x="684" fg:w="1"/><text x="21.3676%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="21.1176%" y="677" width="0.0309%" height="15" fill="rgb(217,24,9)" fg:x="684" fg:w="1"/><text x="21.3676%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="21.1176%" y="661" width="0.0309%" height="15" fill="rgb(220,13,46)" fg:x="684" fg:w="1"/><text x="21.3676%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.03%)</title><rect x="21.1176%" y="645" width="0.0309%" height="15" fill="rgb(239,221,27)" fg:x="684" fg:w="1"/><text x="21.3676%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="21.1176%" y="629" width="0.0309%" height="15" fill="rgb(222,198,25)" fg:x="684" fg:w="1"/><text x="21.3676%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="21.1176%" y="613" width="0.0309%" height="15" fill="rgb(211,99,13)" fg:x="684" fg:w="1"/><text x="21.3676%" y="623.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.03%)</title><rect x="21.1176%" y="597" width="0.0309%" height="15" fill="rgb(232,111,31)" fg:x="684" fg:w="1"/><text x="21.3676%" y="607.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="21.1176%" y="581" width="0.0309%" height="15" fill="rgb(245,82,37)" fg:x="684" fg:w="1"/><text x="21.3676%" y="591.50"></text></g><g><title>codebook_config::CodebookConfig::is_allowed_word (1 samples, 0.03%)</title><rect x="21.1176%" y="565" width="0.0309%" height="15" fill="rgb(227,149,46)" fg:x="684" fg:w="1"/><text x="21.3676%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="21.1176%" y="549" width="0.0309%" height="15" fill="rgb(218,36,50)" fg:x="684" fg:w="1"/><text x="21.3676%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="21.1176%" y="533" width="0.0309%" height="15" fill="rgb(226,80,48)" fg:x="684" fg:w="1"/><text x="21.3676%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="21.1176%" y="517" width="0.0309%" height="15" fill="rgb(238,224,15)" fg:x="684" fg:w="1"/><text x="21.3676%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="21.1176%" y="501" width="0.0309%" height="15" fill="rgb(241,136,10)" fg:x="684" fg:w="1"/><text x="21.3676%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.03%)</title><rect x="21.1176%" y="485" width="0.0309%" height="15" fill="rgb(208,32,45)" fg:x="684" fg:w="1"/><text x="21.3676%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="21.1176%" y="469" width="0.0309%" height="15" fill="rgb(207,135,9)" fg:x="684" fg:w="1"/><text x="21.3676%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="21.1176%" y="453" width="0.0309%" height="15" fill="rgb(206,86,44)" fg:x="684" fg:w="1"/><text x="21.3676%" y="463.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.03%)</title><rect x="21.1176%" y="437" width="0.0309%" height="15" fill="rgb(245,177,15)" fg:x="684" fg:w="1"/><text x="21.3676%" y="447.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="21.1176%" y="421" width="0.0309%" height="15" fill="rgb(206,64,50)" fg:x="684" fg:w="1"/><text x="21.3676%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="21.1485%" y="613" width="0.0926%" height="15" fill="rgb(234,36,40)" fg:x="685" fg:w="3"/><text x="21.3985%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="21.1485%" y="597" width="0.0926%" height="15" fill="rgb(213,64,8)" fg:x="685" fg:w="3"/><text x="21.3985%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="21.1485%" y="581" width="0.0926%" height="15" fill="rgb(210,75,36)" fg:x="685" fg:w="3"/><text x="21.3985%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3 samples, 0.09%)</title><rect x="21.1485%" y="565" width="0.0926%" height="15" fill="rgb(229,88,21)" fg:x="685" fg:w="3"/><text x="21.3985%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="21.1485%" y="549" width="0.0926%" height="15" fill="rgb(252,204,47)" fg:x="685" fg:w="3"/><text x="21.3985%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="21.1485%" y="533" width="0.0926%" height="15" fill="rgb(208,77,27)" fg:x="685" fg:w="3"/><text x="21.3985%" y="543.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="21.1485%" y="517" width="0.0926%" height="15" fill="rgb(221,76,26)" fg:x="685" fg:w="3"/><text x="21.3985%" y="527.50"></text></g><g><title>__rustc::__rdl_alloc (3 samples, 0.09%)</title><rect x="21.1485%" y="501" width="0.0926%" height="15" fill="rgb(225,139,18)" fg:x="685" fg:w="3"/><text x="21.3985%" y="511.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="21.1485%" y="485" width="0.0926%" height="15" fill="rgb(230,137,11)" fg:x="685" fg:w="3"/><text x="21.3985%" y="495.50"></text></g><g><title>codebook_config::CodebookConfig::should_flag_word (2 samples, 0.06%)</title><rect x="21.1794%" y="469" width="0.0617%" height="15" fill="rgb(212,28,1)" fg:x="686" fg:w="2"/><text x="21.4294%" y="479.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_ascii_lowercase (2 samples, 0.06%)</title><rect x="21.1794%" y="453" width="0.0617%" height="15" fill="rgb(248,164,17)" fg:x="686" fg:w="2"/><text x="21.4294%" y="463.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.06%)</title><rect x="21.1794%" y="437" width="0.0617%" height="15" fill="rgb(222,171,42)" fg:x="686" fg:w="2"/><text x="21.4294%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.06%)</title><rect x="21.1794%" y="421" width="0.0617%" height="15" fill="rgb(243,84,45)" fg:x="686" fg:w="2"/><text x="21.4294%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.06%)</title><rect x="21.1794%" y="405" width="0.0617%" height="15" fill="rgb(252,49,23)" fg:x="686" fg:w="2"/><text x="21.4294%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.06%)</title><rect x="21.1794%" y="389" width="0.0617%" height="15" fill="rgb(215,19,7)" fg:x="686" fg:w="2"/><text x="21.4294%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2 samples, 0.06%)</title><rect x="21.1794%" y="373" width="0.0617%" height="15" fill="rgb(238,81,41)" fg:x="686" fg:w="2"/><text x="21.4294%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="21.1794%" y="357" width="0.0617%" height="15" fill="rgb(210,199,37)" fg:x="686" fg:w="2"/><text x="21.4294%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="21.1794%" y="341" width="0.0617%" height="15" fill="rgb(244,192,49)" fg:x="686" fg:w="2"/><text x="21.4294%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="21.1794%" y="325" width="0.0617%" height="15" fill="rgb(226,211,11)" fg:x="686" fg:w="2"/><text x="21.4294%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.06%)</title><rect x="21.1794%" y="309" width="0.0617%" height="15" fill="rgb(236,162,54)" fg:x="686" fg:w="2"/><text x="21.4294%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.06%)</title><rect x="21.1794%" y="293" width="0.0617%" height="15" fill="rgb(220,229,9)" fg:x="686" fg:w="2"/><text x="21.4294%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.06%)</title><rect x="21.1794%" y="277" width="0.0617%" height="15" fill="rgb(250,87,22)" fg:x="686" fg:w="2"/><text x="21.4294%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.06%)</title><rect x="21.1794%" y="261" width="0.0617%" height="15" fill="rgb(239,43,17)" fg:x="686" fg:w="2"/><text x="21.4294%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.06%)</title><rect x="21.1794%" y="245" width="0.0617%" height="15" fill="rgb(231,177,25)" fg:x="686" fg:w="2"/><text x="21.4294%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.06%)</title><rect x="21.1794%" y="229" width="0.0617%" height="15" fill="rgb(219,179,1)" fg:x="686" fg:w="2"/><text x="21.4294%" y="239.50"></text></g><g><title>codebook::Codebook::spell_check::{{closure}} (649 samples, 20.04%)</title><rect x="1.2349%" y="741" width="20.0370%" height="15" fill="rgb(238,219,53)" fg:x="40" fg:w="649"/><text x="1.4849%" y="751.50">codebook::Codebook::spell_check..</text></g><g><title>codebook_config::CodebookConfig::should_flag_word (4 samples, 0.12%)</title><rect x="21.1485%" y="725" width="0.1235%" height="15" fill="rgb(232,167,36)" fg:x="685" fg:w="4"/><text x="21.3985%" y="735.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_ascii_lowercase (4 samples, 0.12%)</title><rect x="21.1485%" y="709" width="0.1235%" height="15" fill="rgb(244,19,51)" fg:x="685" fg:w="4"/><text x="21.3985%" y="719.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.12%)</title><rect x="21.1485%" y="693" width="0.1235%" height="15" fill="rgb(224,6,22)" fg:x="685" fg:w="4"/><text x="21.3985%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.12%)</title><rect x="21.1485%" y="677" width="0.1235%" height="15" fill="rgb(224,145,5)" fg:x="685" fg:w="4"/><text x="21.3985%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.12%)</title><rect x="21.1485%" y="661" width="0.1235%" height="15" fill="rgb(234,130,49)" fg:x="685" fg:w="4"/><text x="21.3985%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.12%)</title><rect x="21.1485%" y="645" width="0.1235%" height="15" fill="rgb(254,6,2)" fg:x="685" fg:w="4"/><text x="21.3985%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (4 samples, 0.12%)</title><rect x="21.1485%" y="629" width="0.1235%" height="15" fill="rgb(208,96,46)" fg:x="685" fg:w="4"/><text x="21.3985%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="21.2411%" y="613" width="0.0309%" height="15" fill="rgb(239,3,39)" fg:x="688" fg:w="1"/><text x="21.4911%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="21.2411%" y="597" width="0.0309%" height="15" fill="rgb(233,210,1)" fg:x="688" fg:w="1"/><text x="21.4911%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="21.2720%" y="725" width="0.0309%" height="15" fill="rgb(244,137,37)" fg:x="689" fg:w="1"/><text x="21.5220%" y="735.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="21.2720%" y="709" width="0.0309%" height="15" fill="rgb(240,136,2)" fg:x="689" fg:w="1"/><text x="21.5220%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="21.2720%" y="693" width="0.0309%" height="15" fill="rgb(239,18,37)" fg:x="689" fg:w="1"/><text x="21.5220%" y="703.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="21.2720%" y="677" width="0.0309%" height="15" fill="rgb(218,185,22)" fg:x="689" fg:w="1"/><text x="21.5220%" y="687.50"></text></g><g><title>&lt;unicode_segmentation::word::UWordBounds as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="21.3029%" y="725" width="0.0309%" height="15" fill="rgb(225,218,4)" fg:x="690" fg:w="1"/><text x="21.5529%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (493 samples, 15.22%)</title><rect x="21.3646%" y="581" width="15.2207%" height="15" fill="rgb(230,182,32)" fg:x="692" fg:w="493"/><text x="21.6146%" y="591.50">alloc::vec::Vec&lt;T,A&gt;::w..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (493 samples, 15.22%)</title><rect x="21.3646%" y="565" width="15.2207%" height="15" fill="rgb(242,56,43)" fg:x="692" fg:w="493"/><text x="21.6146%" y="575.50">alloc::raw_vec::RawVec&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (493 samples, 15.22%)</title><rect x="21.3646%" y="549" width="15.2207%" height="15" fill="rgb(233,99,24)" fg:x="692" fg:w="493"/><text x="21.6146%" y="559.50">alloc::raw_vec::RawVecI..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (493 samples, 15.22%)</title><rect x="21.3646%" y="533" width="15.2207%" height="15" fill="rgb(234,209,42)" fg:x="692" fg:w="493"/><text x="21.6146%" y="543.50">alloc::raw_vec::RawVecI..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (493 samples, 15.22%)</title><rect x="21.3646%" y="517" width="15.2207%" height="15" fill="rgb(227,7,12)" fg:x="692" fg:w="493"/><text x="21.6146%" y="527.50">&lt;alloc::alloc::Global a..</text></g><g><title>alloc::alloc::Global::alloc_impl (493 samples, 15.22%)</title><rect x="21.3646%" y="501" width="15.2207%" height="15" fill="rgb(245,203,43)" fg:x="692" fg:w="493"/><text x="21.6146%" y="511.50">alloc::alloc::Global::a..</text></g><g><title>alloc::alloc::alloc (493 samples, 15.22%)</title><rect x="21.3646%" y="485" width="15.2207%" height="15" fill="rgb(238,205,33)" fg:x="692" fg:w="493"/><text x="21.6146%" y="495.50">alloc::alloc::alloc</text></g><g><title>__rustc::__rdl_alloc (493 samples, 15.22%)</title><rect x="21.3646%" y="469" width="15.2207%" height="15" fill="rgb(231,56,7)" fg:x="692" fg:w="493"/><text x="21.6146%" y="479.50">__rustc::__rdl_alloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (493 samples, 15.22%)</title><rect x="21.3646%" y="453" width="15.2207%" height="15" fill="rgb(244,186,29)" fg:x="692" fg:w="493"/><text x="21.6146%" y="463.50">std::sys::alloc::unix::..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (736 samples, 22.72%)</title><rect x="21.3646%" y="709" width="22.7231%" height="15" fill="rgb(234,111,31)" fg:x="692" fg:w="736"/><text x="21.6146%" y="719.50">&lt;T as alloc::string::ToString&gt;::to_s..</text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (736 samples, 22.72%)</title><rect x="21.3646%" y="693" width="22.7231%" height="15" fill="rgb(241,149,10)" fg:x="692" fg:w="736"/><text x="21.6146%" y="703.50">&lt;str as alloc::string::SpecToString&gt;..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (736 samples, 22.72%)</title><rect x="21.3646%" y="677" width="22.7231%" height="15" fill="rgb(249,206,44)" fg:x="692" fg:w="736"/><text x="21.6146%" y="687.50">&lt;alloc::string::String as core::conv..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (736 samples, 22.72%)</title><rect x="21.3646%" y="661" width="22.7231%" height="15" fill="rgb(251,153,30)" fg:x="692" fg:w="736"/><text x="21.6146%" y="671.50">alloc::str::&lt;impl alloc::borrow::ToO..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (736 samples, 22.72%)</title><rect x="21.3646%" y="645" width="22.7231%" height="15" fill="rgb(239,152,38)" fg:x="692" fg:w="736"/><text x="21.6146%" y="655.50">alloc::slice::&lt;impl alloc::borrow::T..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (736 samples, 22.72%)</title><rect x="21.3646%" y="629" width="22.7231%" height="15" fill="rgb(249,139,47)" fg:x="692" fg:w="736"/><text x="21.6146%" y="639.50">alloc::slice::&lt;impl [T]&gt;::to_vec</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (736 samples, 22.72%)</title><rect x="21.3646%" y="613" width="22.7231%" height="15" fill="rgb(244,64,35)" fg:x="692" fg:w="736"/><text x="21.6146%" y="623.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (736 samples, 22.72%)</title><rect x="21.3646%" y="597" width="22.7231%" height="15" fill="rgb(216,46,15)" fg:x="692" fg:w="736"/><text x="21.6146%" y="607.50">&lt;T as alloc::slice::&lt;impl [T]&gt;::to_v..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (243 samples, 7.50%)</title><rect x="36.5854%" y="581" width="7.5023%" height="15" fill="rgb(250,74,19)" fg:x="1185" fg:w="243"/><text x="36.8354%" y="591.50">core::ptr:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (243 samples, 7.50%)</title><rect x="36.5854%" y="565" width="7.5023%" height="15" fill="rgb(249,42,33)" fg:x="1185" fg:w="243"/><text x="36.8354%" y="575.50">core::intr..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18 samples, 0.56%)</title><rect x="44.0877%" y="709" width="0.5557%" height="15" fill="rgb(242,149,17)" fg:x="1428" fg:w="18"/><text x="44.3377%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.09%)</title><rect x="44.5508%" y="693" width="0.0926%" height="15" fill="rgb(244,29,21)" fg:x="1443" fg:w="3"/><text x="44.8008%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3 samples, 0.09%)</title><rect x="44.5508%" y="677" width="0.0926%" height="15" fill="rgb(220,130,37)" fg:x="1443" fg:w="3"/><text x="44.8008%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.09%)</title><rect x="44.5508%" y="661" width="0.0926%" height="15" fill="rgb(211,67,2)" fg:x="1443" fg:w="3"/><text x="44.8008%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.09%)</title><rect x="44.5508%" y="645" width="0.0926%" height="15" fill="rgb(235,68,52)" fg:x="1443" fg:w="3"/><text x="44.8008%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="44.6434%" y="693" width="0.0309%" height="15" fill="rgb(246,142,3)" fg:x="1446" fg:w="1"/><text x="44.8934%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="44.6434%" y="677" width="0.0309%" height="15" fill="rgb(241,25,7)" fg:x="1446" fg:w="1"/><text x="44.8934%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.03%)</title><rect x="44.6434%" y="661" width="0.0309%" height="15" fill="rgb(242,119,39)" fg:x="1446" fg:w="1"/><text x="44.8934%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="44.6434%" y="645" width="0.0309%" height="15" fill="rgb(241,98,45)" fg:x="1446" fg:w="1"/><text x="44.8934%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="44.6434%" y="629" width="0.0309%" height="15" fill="rgb(254,28,30)" fg:x="1446" fg:w="1"/><text x="44.8934%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="44.6743%" y="629" width="0.0617%" height="15" fill="rgb(241,142,54)" fg:x="1447" fg:w="2"/><text x="44.9243%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.06%)</title><rect x="44.6743%" y="613" width="0.0617%" height="15" fill="rgb(222,85,15)" fg:x="1447" fg:w="2"/><text x="44.9243%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.06%)</title><rect x="44.6743%" y="597" width="0.0617%" height="15" fill="rgb(210,85,47)" fg:x="1447" fg:w="2"/><text x="44.9243%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.06%)</title><rect x="44.6743%" y="581" width="0.0617%" height="15" fill="rgb(224,206,25)" fg:x="1447" fg:w="2"/><text x="44.9243%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2 samples, 0.06%)</title><rect x="44.6743%" y="565" width="0.0617%" height="15" fill="rgb(243,201,19)" fg:x="1447" fg:w="2"/><text x="44.9243%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.06%)</title><rect x="44.6743%" y="549" width="0.0617%" height="15" fill="rgb(236,59,4)" fg:x="1447" fg:w="2"/><text x="44.9243%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="44.6743%" y="533" width="0.0617%" height="15" fill="rgb(254,179,45)" fg:x="1447" fg:w="2"/><text x="44.9243%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="44.6743%" y="517" width="0.0617%" height="15" fill="rgb(226,14,10)" fg:x="1447" fg:w="2"/><text x="44.9243%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.09%)</title><rect x="44.6743%" y="693" width="0.0926%" height="15" fill="rgb(244,27,41)" fg:x="1447" fg:w="3"/><text x="44.9243%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.09%)</title><rect x="44.6743%" y="677" width="0.0926%" height="15" fill="rgb(235,35,32)" fg:x="1447" fg:w="3"/><text x="44.9243%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.09%)</title><rect x="44.6743%" y="661" width="0.0926%" height="15" fill="rgb(218,68,31)" fg:x="1447" fg:w="3"/><text x="44.9243%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.09%)</title><rect x="44.6743%" y="645" width="0.0926%" height="15" fill="rgb(207,120,37)" fg:x="1447" fg:w="3"/><text x="44.9243%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="44.7360%" y="629" width="0.0309%" height="15" fill="rgb(227,98,0)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="44.7360%" y="613" width="0.0309%" height="15" fill="rgb(207,7,3)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="44.7360%" y="597" width="0.0309%" height="15" fill="rgb(206,98,19)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="44.7360%" y="581" width="0.0309%" height="15" fill="rgb(217,5,26)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="44.7360%" y="565" width="0.0309%" height="15" fill="rgb(235,190,38)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="44.7360%" y="549" width="0.0309%" height="15" fill="rgb(247,86,24)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="44.7360%" y="533" width="0.0309%" height="15" fill="rgb(205,101,16)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="44.7360%" y="517" width="0.0309%" height="15" fill="rgb(246,168,33)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="527.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.03%)</title><rect x="44.7360%" y="501" width="0.0309%" height="15" fill="rgb(231,114,1)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="511.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="44.7360%" y="485" width="0.0309%" height="15" fill="rgb(207,184,53)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="44.7360%" y="469" width="0.0309%" height="15" fill="rgb(224,95,51)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="44.7360%" y="453" width="0.0309%" height="15" fill="rgb(212,188,45)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="44.7360%" y="437" width="0.0309%" height="15" fill="rgb(223,154,38)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="44.7360%" y="421" width="0.0309%" height="15" fill="rgb(251,22,52)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="44.7360%" y="405" width="0.0309%" height="15" fill="rgb(229,209,22)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="44.7360%" y="389" width="0.0309%" height="15" fill="rgb(234,138,34)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="44.7360%" y="373" width="0.0309%" height="15" fill="rgb(212,95,11)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="44.7360%" y="357" width="0.0309%" height="15" fill="rgb(240,179,47)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="44.7360%" y="341" width="0.0309%" height="15" fill="rgb(240,163,11)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="44.7360%" y="325" width="0.0309%" height="15" fill="rgb(236,37,12)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.03%)</title><rect x="44.7360%" y="309" width="0.0309%" height="15" fill="rgb(232,164,16)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="44.7360%" y="293" width="0.0309%" height="15" fill="rgb(244,205,15)" fg:x="1449" fg:w="1"/><text x="44.9860%" y="303.50"></text></g><g><title>codebook::splitter::split (5 samples, 0.15%)</title><rect x="44.6434%" y="709" width="0.1544%" height="15" fill="rgb(223,117,47)" fg:x="1446" fg:w="5"/><text x="44.8934%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,char)&gt;&gt; (1 samples, 0.03%)</title><rect x="44.7669%" y="693" width="0.0309%" height="15" fill="rgb(244,107,35)" fg:x="1450" fg:w="1"/><text x="45.0169%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,char)&gt;&gt; (1 samples, 0.03%)</title><rect x="44.7669%" y="677" width="0.0309%" height="15" fill="rgb(205,140,8)" fg:x="1450" fg:w="1"/><text x="45.0169%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="44.7669%" y="661" width="0.0309%" height="15" fill="rgb(228,84,46)" fg:x="1450" fg:w="1"/><text x="45.0169%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.03%)</title><rect x="44.7669%" y="645" width="0.0309%" height="15" fill="rgb(254,188,9)" fg:x="1450" fg:w="1"/><text x="45.0169%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="44.7669%" y="629" width="0.0309%" height="15" fill="rgb(206,112,54)" fg:x="1450" fg:w="1"/><text x="45.0169%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="44.7669%" y="613" width="0.0309%" height="15" fill="rgb(216,84,49)" fg:x="1450" fg:w="1"/><text x="45.0169%" y="623.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.03%)</title><rect x="44.7669%" y="597" width="0.0309%" height="15" fill="rgb(214,194,35)" fg:x="1450" fg:w="1"/><text x="45.0169%" y="607.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="44.7669%" y="581" width="0.0309%" height="15" fill="rgb(249,28,3)" fg:x="1450" fg:w="1"/><text x="45.0169%" y="591.50"></text></g><g><title>codebook::parser::TextProcessor::add_split_words (762 samples, 23.53%)</title><rect x="21.3337%" y="725" width="23.5258%" height="15" fill="rgb(222,56,52)" fg:x="691" fg:w="762"/><text x="21.5837%" y="735.50">codebook::parser::TextProcessor::add_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;codebook::splitter::SplitRef&gt;&gt; (2 samples, 0.06%)</title><rect x="44.7978%" y="709" width="0.0617%" height="15" fill="rgb(245,217,50)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="44.7978%" y="693" width="0.0617%" height="15" fill="rgb(213,201,24)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;codebook::splitter::SplitRef,alloc::alloc::Global&gt;&gt; (2 samples, 0.06%)</title><rect x="44.7978%" y="677" width="0.0617%" height="15" fill="rgb(248,116,28)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="687.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="44.7978%" y="661" width="0.0617%" height="15" fill="rgb(219,72,43)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;codebook::splitter::SplitRef&gt;&gt; (2 samples, 0.06%)</title><rect x="44.7978%" y="645" width="0.0617%" height="15" fill="rgb(209,138,14)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="44.7978%" y="629" width="0.0617%" height="15" fill="rgb(222,18,33)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 0.06%)</title><rect x="44.7978%" y="613" width="0.0617%" height="15" fill="rgb(213,199,7)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.06%)</title><rect x="44.7978%" y="597" width="0.0617%" height="15" fill="rgb(250,110,10)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.06%)</title><rect x="44.7978%" y="581" width="0.0617%" height="15" fill="rgb(248,123,6)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="591.50"></text></g><g><title>__rustc::__rdl_dealloc (2 samples, 0.06%)</title><rect x="44.7978%" y="565" width="0.0617%" height="15" fill="rgb(206,91,31)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="575.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.06%)</title><rect x="44.7978%" y="549" width="0.0617%" height="15" fill="rgb(211,154,13)" fg:x="1451" fg:w="2"/><text x="45.0478%" y="559.50"></text></g><g><title>codebook::parser::TextProcessor::extract_words (783 samples, 24.17%)</title><rect x="21.2720%" y="741" width="24.1741%" height="15" fill="rgb(225,148,7)" fg:x="689" fg:w="783"/><text x="21.5220%" y="751.50">codebook::parser::TextProcessor::extra..</text></g><g><title>core::iter::traits::iterator::Iterator::count (19 samples, 0.59%)</title><rect x="44.8595%" y="725" width="0.5866%" height="15" fill="rgb(220,160,43)" fg:x="1453" fg:w="19"/><text x="45.1095%" y="735.50"></text></g><g><title>codebook::parser::TextProcessor::extract_words (14 samples, 0.43%)</title><rect x="45.0139%" y="709" width="0.4322%" height="15" fill="rgb(213,52,39)" fg:x="1458" fg:w="14"/><text x="45.2639%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (14 samples, 0.43%)</title><rect x="45.0139%" y="693" width="0.4322%" height="15" fill="rgb(243,137,7)" fg:x="1458" fg:w="14"/><text x="45.2639%" y="703.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (3 samples, 0.09%)</title><rect x="45.4461%" y="725" width="0.0926%" height="15" fill="rgb(230,79,13)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="735.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (3 samples, 0.09%)</title><rect x="45.4461%" y="709" width="0.0926%" height="15" fill="rgb(247,105,23)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (3 samples, 0.09%)</title><rect x="45.4461%" y="693" width="0.0926%" height="15" fill="rgb(223,179,41)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="703.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.09%)</title><rect x="45.4461%" y="677" width="0.0926%" height="15" fill="rgb(218,9,34)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.09%)</title><rect x="45.4461%" y="661" width="0.0926%" height="15" fill="rgb(222,106,8)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.09%)</title><rect x="45.4461%" y="645" width="0.0926%" height="15" fill="rgb(211,220,0)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.09%)</title><rect x="45.4461%" y="629" width="0.0926%" height="15" fill="rgb(229,52,16)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3 samples, 0.09%)</title><rect x="45.4461%" y="613" width="0.0926%" height="15" fill="rgb(212,155,18)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.09%)</title><rect x="45.4461%" y="597" width="0.0926%" height="15" fill="rgb(242,21,14)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="45.4461%" y="581" width="0.0926%" height="15" fill="rgb(222,19,48)" fg:x="1472" fg:w="3"/><text x="45.6961%" y="591.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="45.5387%" y="709" width="0.0309%" height="15" fill="rgb(232,45,27)" fg:x="1475" fg:w="1"/><text x="45.7887%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="45.5387%" y="693" width="0.0309%" height="15" fill="rgb(249,103,42)" fg:x="1475" fg:w="1"/><text x="45.7887%" y="703.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="45.5387%" y="677" width="0.0309%" height="15" fill="rgb(246,81,33)" fg:x="1475" fg:w="1"/><text x="45.7887%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.19%)</title><rect x="45.5696%" y="709" width="0.1852%" height="15" fill="rgb(252,33,42)" fg:x="1476" fg:w="6"/><text x="45.8196%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.19%)</title><rect x="45.5696%" y="693" width="0.1852%" height="15" fill="rgb(209,212,41)" fg:x="1476" fg:w="6"/><text x="45.8196%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (6 samples, 0.19%)</title><rect x="45.5696%" y="677" width="0.1852%" height="15" fill="rgb(207,154,6)" fg:x="1476" fg:w="6"/><text x="45.8196%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (6 samples, 0.19%)</title><rect x="45.5696%" y="661" width="0.1852%" height="15" fill="rgb(223,64,47)" fg:x="1476" fg:w="6"/><text x="45.8196%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.19%)</title><rect x="45.5696%" y="645" width="0.1852%" height="15" fill="rgb(211,161,38)" fg:x="1476" fg:w="6"/><text x="45.8196%" y="655.50"></text></g><g><title>codebook::parser::TextProcessor::new (45 samples, 1.39%)</title><rect x="45.8784%" y="693" width="1.3893%" height="15" fill="rgb(219,138,40)" fg:x="1486" fg:w="45"/><text x="46.1284%" y="703.50"></text></g><g><title>codebook::parser::TextProcessor::calculate_line_starts (45 samples, 1.39%)</title><rect x="45.8784%" y="677" width="1.3893%" height="15" fill="rgb(241,228,46)" fg:x="1486" fg:w="45"/><text x="46.1284%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (45 samples, 1.39%)</title><rect x="45.8784%" y="661" width="1.3893%" height="15" fill="rgb(223,209,38)" fg:x="1486" fg:w="45"/><text x="46.1284%" y="671.50"></text></g><g><title>codebook::parser::TextProcessor::calculate_line_starts (59 samples, 1.82%)</title><rect x="45.5387%" y="725" width="1.8215%" height="15" fill="rgb(236,164,45)" fg:x="1475" fg:w="59"/><text x="45.7887%" y="735.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::count (52 samples, 1.61%)</title><rect x="45.7549%" y="709" width="1.6054%" height="15" fill="rgb(231,15,5)" fg:x="1482" fg:w="52"/><text x="46.0049%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.09%)</title><rect x="47.2677%" y="693" width="0.0926%" height="15" fill="rgb(252,35,15)" fg:x="1531" fg:w="3"/><text x="47.5177%" y="703.50"></text></g><g><title>&lt;unicode_segmentation::grapheme::Graphemes as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="47.2677%" y="677" width="0.0926%" height="15" fill="rgb(248,181,18)" fg:x="1531" fg:w="3"/><text x="47.5177%" y="687.50"></text></g><g><title>unicode_segmentation::grapheme::GraphemeCursor::next_boundary (3 samples, 0.09%)</title><rect x="47.2677%" y="661" width="0.0926%" height="15" fill="rgb(233,39,42)" fg:x="1531" fg:w="3"/><text x="47.5177%" y="671.50"></text></g><g><title>unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (3 samples, 0.09%)</title><rect x="47.2677%" y="645" width="0.0926%" height="15" fill="rgb(238,110,33)" fg:x="1531" fg:w="3"/><text x="47.5177%" y="655.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.06%)</title><rect x="47.3603%" y="613" width="0.0617%" height="15" fill="rgb(233,195,10)" fg:x="1534" fg:w="2"/><text x="47.6103%" y="623.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search (2 samples, 0.06%)</title><rect x="47.3603%" y="597" width="0.0617%" height="15" fill="rgb(254,105,3)" fg:x="1534" fg:w="2"/><text x="47.6103%" y="607.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.06%)</title><rect x="47.3603%" y="581" width="0.0617%" height="15" fill="rgb(221,225,9)" fg:x="1534" fg:w="2"/><text x="47.6103%" y="591.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (2 samples, 0.06%)</title><rect x="47.3603%" y="565" width="0.0617%" height="15" fill="rgb(224,227,45)" fg:x="1534" fg:w="2"/><text x="47.6103%" y="575.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.06%)</title><rect x="47.3603%" y="549" width="0.0617%" height="15" fill="rgb(229,198,43)" fg:x="1534" fg:w="2"/><text x="47.6103%" y="559.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (2 samples, 0.06%)</title><rect x="47.3603%" y="533" width="0.0617%" height="15" fill="rgb(206,209,35)" fg:x="1534" fg:w="2"/><text x="47.6103%" y="543.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state (2 samples, 0.06%)</title><rect x="47.3603%" y="517" width="0.0617%" height="15" fill="rgb(245,195,53)" fg:x="1534" fg:w="2"/><text x="47.6103%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (14 samples, 0.43%)</title><rect x="47.4220%" y="501" width="0.4322%" height="15" fill="rgb(240,92,26)" fg:x="1536" fg:w="14"/><text x="47.6720%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.43%)</title><rect x="47.4220%" y="485" width="0.4322%" height="15" fill="rgb(207,40,23)" fg:x="1536" fg:w="14"/><text x="47.6720%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::search_imp (2 samples, 0.06%)</title><rect x="48.8114%" y="485" width="0.0617%" height="15" fill="rgb(223,111,35)" fg:x="1581" fg:w="2"/><text x="49.0614%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::epsilon_closure (2 samples, 0.06%)</title><rect x="48.8114%" y="469" width="0.0617%" height="15" fill="rgb(229,147,28)" fg:x="1581" fg:w="2"/><text x="49.0614%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::epsilon_closure_explore (2 samples, 0.06%)</title><rect x="48.8114%" y="453" width="0.0617%" height="15" fill="rgb(211,29,28)" fg:x="1581" fg:w="2"/><text x="49.0614%" y="463.50"></text></g><g><title>regex_automata::util::look::LookMatcher::matches_inline (2 samples, 0.06%)</title><rect x="48.8114%" y="437" width="0.0617%" height="15" fill="rgb(228,72,33)" fg:x="1581" fg:w="2"/><text x="49.0614%" y="447.50"></text></g><g><title>regex_automata::util::look::is_word_char::fwd (12 samples, 0.37%)</title><rect x="48.8731%" y="469" width="0.3705%" height="15" fill="rgb(205,214,31)" fg:x="1583" fg:w="12"/><text x="49.1231%" y="479.50"></text></g><g><title>regex_syntax::try_is_word_character (12 samples, 0.37%)</title><rect x="48.8731%" y="453" width="0.3705%" height="15" fill="rgb(224,111,15)" fg:x="1583" fg:w="12"/><text x="49.1231%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::epsilon_closure (63 samples, 1.95%)</title><rect x="47.4220%" y="533" width="1.9450%" height="15" fill="rgb(253,21,26)" fg:x="1536" fg:w="63"/><text x="47.6720%" y="543.50">r..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::epsilon_closure_explore (63 samples, 1.95%)</title><rect x="47.4220%" y="517" width="1.9450%" height="15" fill="rgb(245,139,43)" fg:x="1536" fg:w="63"/><text x="47.6720%" y="527.50">r..</text></g><g><title>regex_automata::util::look::LookMatcher::matches_inline (49 samples, 1.51%)</title><rect x="47.8543%" y="501" width="1.5128%" height="15" fill="rgb(252,170,7)" fg:x="1550" fg:w="49"/><text x="48.1043%" y="511.50"></text></g><g><title>regex_automata::util::look::LookMatcher::is_word_unicode (16 samples, 0.49%)</title><rect x="48.8731%" y="485" width="0.4940%" height="15" fill="rgb(231,118,14)" fg:x="1583" fg:w="16"/><text x="49.1231%" y="495.50"></text></g><g><title>regex_automata::util::look::is_word_char::rev (4 samples, 0.12%)</title><rect x="49.2436%" y="469" width="0.1235%" height="15" fill="rgb(238,83,0)" fg:x="1595" fg:w="4"/><text x="49.4936%" y="479.50"></text></g><g><title>regex_syntax::try_is_word_character (4 samples, 0.12%)</title><rect x="49.2436%" y="453" width="0.1235%" height="15" fill="rgb(221,39,39)" fg:x="1595" fg:w="4"/><text x="49.4936%" y="463.50"></text></g><g><title>&lt;regex::regex::string::Matches as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 2.04%)</title><rect x="47.3603%" y="709" width="2.0377%" height="15" fill="rgb(222,119,46)" fg:x="1534" fg:w="66"/><text x="47.6103%" y="719.50">&lt;..</text></g><g><title>&lt;regex_automata::meta::regex::FindMatches as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 2.04%)</title><rect x="47.3603%" y="693" width="2.0377%" height="15" fill="rgb(222,165,49)" fg:x="1534" fg:w="66"/><text x="47.6103%" y="703.50">&lt;..</text></g><g><title>regex_automata::util::iter::Searcher::advance (66 samples, 2.04%)</title><rect x="47.3603%" y="677" width="2.0377%" height="15" fill="rgb(219,113,52)" fg:x="1534" fg:w="66"/><text x="47.6103%" y="687.50">r..</text></g><g><title>regex_automata::util::iter::Searcher::try_advance (66 samples, 2.04%)</title><rect x="47.3603%" y="661" width="2.0377%" height="15" fill="rgb(214,7,15)" fg:x="1534" fg:w="66"/><text x="47.6103%" y="671.50">r..</text></g><g><title>&lt;regex_automata::meta::regex::FindMatches as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (66 samples, 2.04%)</title><rect x="47.3603%" y="645" width="2.0377%" height="15" fill="rgb(235,32,4)" fg:x="1534" fg:w="66"/><text x="47.6103%" y="655.50">&lt;..</text></g><g><title>regex_automata::meta::regex::Regex::search_with (66 samples, 2.04%)</title><rect x="47.3603%" y="629" width="2.0377%" height="15" fill="rgb(238,90,54)" fg:x="1534" fg:w="66"/><text x="47.6103%" y="639.50">r..</text></g><g><title>regex_automata::meta::strategy::Core::search_nofail (64 samples, 1.98%)</title><rect x="47.4220%" y="613" width="1.9759%" height="15" fill="rgb(213,208,19)" fg:x="1536" fg:w="64"/><text x="47.6720%" y="623.50">r..</text></g><g><title>regex_automata::meta::wrappers::PikeVMEngine::search_slots (64 samples, 1.98%)</title><rect x="47.4220%" y="597" width="1.9759%" height="15" fill="rgb(233,156,4)" fg:x="1536" fg:w="64"/><text x="47.6720%" y="607.50">r..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::search_slots (64 samples, 1.98%)</title><rect x="47.4220%" y="581" width="1.9759%" height="15" fill="rgb(207,194,5)" fg:x="1536" fg:w="64"/><text x="47.6720%" y="591.50">r..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::search_slots_imp (64 samples, 1.98%)</title><rect x="47.4220%" y="565" width="1.9759%" height="15" fill="rgb(206,111,30)" fg:x="1536" fg:w="64"/><text x="47.6720%" y="575.50">r..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::search_imp (64 samples, 1.98%)</title><rect x="47.4220%" y="549" width="1.9759%" height="15" fill="rgb(243,70,54)" fg:x="1536" fg:w="64"/><text x="47.6720%" y="559.50">r..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::nexts (1 samples, 0.03%)</title><rect x="49.3671%" y="533" width="0.0309%" height="15" fill="rgb(242,28,8)" fg:x="1599" fg:w="1"/><text x="49.6171%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::next (1 samples, 0.03%)</title><rect x="49.3671%" y="517" width="0.0309%" height="15" fill="rgb(219,106,18)" fg:x="1599" fg:w="1"/><text x="49.6171%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::epsilon_closure (1 samples, 0.03%)</title><rect x="49.3671%" y="501" width="0.0309%" height="15" fill="rgb(244,222,10)" fg:x="1599" fg:w="1"/><text x="49.6171%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::epsilon_closure_explore (1 samples, 0.03%)</title><rect x="49.3671%" y="485" width="0.0309%" height="15" fill="rgb(236,179,52)" fg:x="1599" fg:w="1"/><text x="49.6171%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="49.3671%" y="469" width="0.0309%" height="15" fill="rgb(213,23,39)" fg:x="1599" fg:w="1"/><text x="49.6171%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="49.3671%" y="453" width="0.0309%" height="15" fill="rgb(238,48,10)" fg:x="1599" fg:w="1"/><text x="49.6171%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (1 samples, 0.03%)</title><rect x="49.4288%" y="597" width="0.0309%" height="15" fill="rgb(251,196,23)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="607.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (1 samples, 0.03%)</title><rect x="49.4288%" y="581" width="0.0309%" height="15" fill="rgb(250,152,24)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="49.4288%" y="565" width="0.0309%" height="15" fill="rgb(209,150,17)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="575.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::{{closure}} (1 samples, 0.03%)</title><rect x="49.4288%" y="549" width="0.0309%" height="15" fill="rgb(234,202,34)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="559.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (1 samples, 0.03%)</title><rect x="49.4288%" y="533" width="0.0309%" height="15" fill="rgb(253,148,53)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="543.50"></text></g><g><title>regex_automata::hybrid::regex::Cache::new (1 samples, 0.03%)</title><rect x="49.4288%" y="517" width="0.0309%" height="15" fill="rgb(218,129,16)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.03%)</title><rect x="49.4288%" y="501" width="0.0309%" height="15" fill="rgb(216,85,19)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.03%)</title><rect x="49.4288%" y="485" width="0.0309%" height="15" fill="rgb(235,228,7)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="49.4288%" y="469" width="0.0309%" height="15" fill="rgb(245,175,0)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="49.4288%" y="453" width="0.0309%" height="15" fill="rgb(208,168,36)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="49.4288%" y="437" width="0.0309%" height="15" fill="rgb(246,171,24)" fg:x="1601" fg:w="1"/><text x="49.6788%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.09%)</title><rect x="49.4288%" y="613" width="0.0926%" height="15" fill="rgb(215,142,24)" fg:x="1601" fg:w="3"/><text x="49.6788%" y="623.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::create_cache (2 samples, 0.06%)</title><rect x="49.4597%" y="597" width="0.0617%" height="15" fill="rgb(250,187,7)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="607.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVMCache::new (2 samples, 0.06%)</title><rect x="49.4597%" y="581" width="0.0617%" height="15" fill="rgb(228,66,33)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.06%)</title><rect x="49.4597%" y="565" width="0.0617%" height="15" fill="rgb(234,215,21)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::Cache::new (2 samples, 0.06%)</title><rect x="49.4597%" y="549" width="0.0617%" height="15" fill="rgb(222,191,20)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.06%)</title><rect x="49.4597%" y="533" width="0.0617%" height="15" fill="rgb(245,79,54)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.06%)</title><rect x="49.4597%" y="517" width="0.0617%" height="15" fill="rgb(240,10,37)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.06%)</title><rect x="49.4597%" y="501" width="0.0617%" height="15" fill="rgb(214,192,32)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="49.4597%" y="485" width="0.0617%" height="15" fill="rgb(209,36,54)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="49.4597%" y="469" width="0.0617%" height="15" fill="rgb(220,10,11)" fg:x="1602" fg:w="2"/><text x="49.7097%" y="479.50"></text></g><g><title>codebook::parser::TextProcessor::new (133 samples, 4.11%)</title><rect x="45.4461%" y="741" width="4.1062%" height="15" fill="rgb(221,106,17)" fg:x="1472" fg:w="133"/><text x="45.6961%" y="751.50">code..</text></g><g><title>codebook::parser::TextProcessor::find_skip_ranges (71 samples, 2.19%)</title><rect x="47.3603%" y="725" width="2.1920%" height="15" fill="rgb(251,142,44)" fg:x="1534" fg:w="71"/><text x="47.6103%" y="735.50">c..</text></g><g><title>regex::regex::string::Regex::find_iter (5 samples, 0.15%)</title><rect x="49.3980%" y="709" width="0.1544%" height="15" fill="rgb(238,13,15)" fg:x="1600" fg:w="5"/><text x="49.6480%" y="719.50"></text></g><g><title>regex_automata::meta::regex::Regex::find_iter (5 samples, 0.15%)</title><rect x="49.3980%" y="693" width="0.1544%" height="15" fill="rgb(208,107,27)" fg:x="1600" fg:w="5"/><text x="49.6480%" y="703.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (5 samples, 0.15%)</title><rect x="49.3980%" y="677" width="0.1544%" height="15" fill="rgb(205,136,37)" fg:x="1600" fg:w="5"/><text x="49.6480%" y="687.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (5 samples, 0.15%)</title><rect x="49.3980%" y="661" width="0.1544%" height="15" fill="rgb(250,205,27)" fg:x="1600" fg:w="5"/><text x="49.6480%" y="671.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.12%)</title><rect x="49.4288%" y="645" width="0.1235%" height="15" fill="rgb(210,80,43)" fg:x="1601" fg:w="4"/><text x="49.6788%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (4 samples, 0.12%)</title><rect x="49.4288%" y="629" width="0.1235%" height="15" fill="rgb(247,160,36)" fg:x="1601" fg:w="4"/><text x="49.6788%" y="639.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseInner as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.03%)</title><rect x="49.5215%" y="613" width="0.0309%" height="15" fill="rgb(234,13,49)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="623.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.03%)</title><rect x="49.5215%" y="597" width="0.0309%" height="15" fill="rgb(234,122,0)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="607.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::create_cache (1 samples, 0.03%)</title><rect x="49.5215%" y="581" width="0.0309%" height="15" fill="rgb(207,146,38)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="591.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVMCache::new (1 samples, 0.03%)</title><rect x="49.5215%" y="565" width="0.0309%" height="15" fill="rgb(207,177,25)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.03%)</title><rect x="49.5215%" y="549" width="0.0309%" height="15" fill="rgb(211,178,42)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::Cache::new (1 samples, 0.03%)</title><rect x="49.5215%" y="533" width="0.0309%" height="15" fill="rgb(230,69,54)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.03%)</title><rect x="49.5215%" y="517" width="0.0309%" height="15" fill="rgb(214,135,41)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.03%)</title><rect x="49.5215%" y="501" width="0.0309%" height="15" fill="rgb(237,67,25)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="49.5215%" y="485" width="0.0309%" height="15" fill="rgb(222,189,50)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="49.5215%" y="469" width="0.0309%" height="15" fill="rgb(245,148,34)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="49.5215%" y="453" width="0.0309%" height="15" fill="rgb(222,29,6)" fg:x="1604" fg:w="1"/><text x="49.7715%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,609 samples, 49.68%)</title><rect x="49.5523%" y="741" width="49.6758%" height="15" fill="rgb(221,189,43)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="751.50">core::ptr::drop_in_place&lt;alloc::string::String&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,609 samples, 49.68%)</title><rect x="49.5523%" y="725" width="49.6758%" height="15" fill="rgb(207,36,27)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="735.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,609 samples, 49.68%)</title><rect x="49.5523%" y="709" width="49.6758%" height="15" fill="rgb(217,90,24)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="719.50">core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt;</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,609 samples, 49.68%)</title><rect x="49.5523%" y="693" width="49.6758%" height="15" fill="rgb(224,66,35)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="703.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,609 samples, 49.68%)</title><rect x="49.5523%" y="677" width="49.6758%" height="15" fill="rgb(221,13,50)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="687.50">alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,609 samples, 49.68%)</title><rect x="49.5523%" y="661" width="49.6758%" height="15" fill="rgb(236,68,49)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="671.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate</text></g><g><title>alloc::alloc::dealloc (1,609 samples, 49.68%)</title><rect x="49.5523%" y="645" width="49.6758%" height="15" fill="rgb(229,146,28)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="655.50">alloc::alloc::dealloc</text></g><g><title>__rustc::__rdl_dealloc (1,609 samples, 49.68%)</title><rect x="49.5523%" y="629" width="49.6758%" height="15" fill="rgb(225,31,38)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="639.50">__rustc::__rdl_dealloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,609 samples, 49.68%)</title><rect x="49.5523%" y="613" width="49.6758%" height="15" fill="rgb(250,208,3)" fg:x="1605" fg:w="1609"/><text x="49.8023%" y="623.50">std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::Syst..</text></g><g><title>codebook::parser::find_locations (3,217 samples, 99.32%)</title><rect x="0.1544%" y="773" width="99.3208%" height="15" fill="rgb(246,54,23)" fg:x="5" fg:w="3217"/><text x="0.4044%" y="783.50">codebook::parser::find_locations</text></g><g><title>codebook::parser::find_locations_text (3,217 samples, 99.32%)</title><rect x="0.1544%" y="757" width="99.3208%" height="15" fill="rgb(243,76,11)" fg:x="5" fg:w="3217"/><text x="0.4044%" y="767.50">codebook::parser::find_locations_text</text></g><g><title>core::ptr::drop_in_place&lt;codebook::parser::TextProcessor&gt; (8 samples, 0.25%)</title><rect x="99.2282%" y="741" width="0.2470%" height="15" fill="rgb(245,21,50)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.25%)</title><rect x="99.2282%" y="725" width="0.2470%" height="15" fill="rgb(228,9,43)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.25%)</title><rect x="99.2282%" y="709" width="0.2470%" height="15" fill="rgb(208,100,47)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.25%)</title><rect x="99.2282%" y="693" width="0.2470%" height="15" fill="rgb(232,26,8)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.25%)</title><rect x="99.2282%" y="677" width="0.2470%" height="15" fill="rgb(216,166,38)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8 samples, 0.25%)</title><rect x="99.2282%" y="661" width="0.2470%" height="15" fill="rgb(251,202,51)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.25%)</title><rect x="99.2282%" y="645" width="0.2470%" height="15" fill="rgb(254,216,34)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.25%)</title><rect x="99.2282%" y="629" width="0.2470%" height="15" fill="rgb(251,32,27)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="639.50"></text></g><g><title>__rustc::__rdl_dealloc (8 samples, 0.25%)</title><rect x="99.2282%" y="613" width="0.2470%" height="15" fill="rgb(208,127,28)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="623.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.25%)</title><rect x="99.2282%" y="597" width="0.2470%" height="15" fill="rgb(224,137,22)" fg:x="3214" fg:w="8"/><text x="99.4782%" y="607.50"></text></g><g><title>codebook::Codebook::spell_check (3,228 samples, 99.66%)</title><rect x="0.0000%" y="789" width="99.6604%" height="15" fill="rgb(254,70,32)" fg:x="0" fg:w="3228"/><text x="0.2500%" y="799.50">codebook::Codebook::spell_check</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex::regex::string::Regex&gt;&gt; (6 samples, 0.19%)</title><rect x="99.4751%" y="773" width="0.1852%" height="15" fill="rgb(229,75,37)" fg:x="3222" fg:w="6"/><text x="99.7251%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.19%)</title><rect x="99.4751%" y="757" width="0.1852%" height="15" fill="rgb(252,64,23)" fg:x="3222" fg:w="6"/><text x="99.7251%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex::regex::string::Regex]&gt; (6 samples, 0.19%)</title><rect x="99.4751%" y="741" width="0.1852%" height="15" fill="rgb(232,162,48)" fg:x="3222" fg:w="6"/><text x="99.7251%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.19%)</title><rect x="99.4751%" y="725" width="0.1852%" height="15" fill="rgb(246,160,12)" fg:x="3222" fg:w="6"/><text x="99.7251%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::marker::Send&gt;&gt;&gt; (6 samples, 0.19%)</title><rect x="99.4751%" y="709" width="0.1852%" height="15" fill="rgb(247,166,0)" fg:x="3222" fg:w="6"/><text x="99.7251%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.15%)</title><rect x="99.5060%" y="693" width="0.1544%" height="15" fill="rgb(249,219,21)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (5 samples, 0.15%)</title><rect x="99.5060%" y="677" width="0.1544%" height="15" fill="rgb(205,209,3)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt; (5 samples, 0.15%)</title><rect x="99.5060%" y="661" width="0.1544%" height="15" fill="rgb(243,44,1)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::util::primitives::StateID&gt;&gt; (5 samples, 0.15%)</title><rect x="99.5060%" y="645" width="0.1544%" height="15" fill="rgb(206,159,16)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.15%)</title><rect x="99.5060%" y="629" width="0.1544%" height="15" fill="rgb(244,77,30)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5 samples, 0.15%)</title><rect x="99.5060%" y="613" width="0.1544%" height="15" fill="rgb(218,69,12)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.15%)</title><rect x="99.5060%" y="597" width="0.1544%" height="15" fill="rgb(212,87,7)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.15%)</title><rect x="99.5060%" y="581" width="0.1544%" height="15" fill="rgb(245,114,25)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="591.50"></text></g><g><title>__rustc::__rdl_dealloc (5 samples, 0.15%)</title><rect x="99.5060%" y="565" width="0.1544%" height="15" fill="rgb(210,61,42)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="575.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.15%)</title><rect x="99.5060%" y="549" width="0.1544%" height="15" fill="rgb(211,52,33)" fg:x="3223" fg:w="5"/><text x="99.7560%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.22%)</title><rect x="99.6604%" y="773" width="0.2161%" height="15" fill="rgb(234,58,33)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;[codebook::parser::WordLocation]&gt; (7 samples, 0.22%)</title><rect x="99.6604%" y="757" width="0.2161%" height="15" fill="rgb(220,115,36)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;codebook::parser::WordLocation&gt; (7 samples, 0.22%)</title><rect x="99.6604%" y="741" width="0.2161%" height="15" fill="rgb(243,153,54)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;codebook::parser::TextRange&gt;&gt; (7 samples, 0.22%)</title><rect x="99.6604%" y="725" width="0.2161%" height="15" fill="rgb(251,47,18)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;codebook::parser::TextRange&gt;&gt; (7 samples, 0.22%)</title><rect x="99.6604%" y="709" width="0.2161%" height="15" fill="rgb(242,102,42)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.22%)</title><rect x="99.6604%" y="693" width="0.2161%" height="15" fill="rgb(234,31,38)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7 samples, 0.22%)</title><rect x="99.6604%" y="677" width="0.2161%" height="15" fill="rgb(221,117,51)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.22%)</title><rect x="99.6604%" y="661" width="0.2161%" height="15" fill="rgb(212,20,18)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.22%)</title><rect x="99.6604%" y="645" width="0.2161%" height="15" fill="rgb(245,133,36)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="655.50"></text></g><g><title>__rustc::__rdl_dealloc (7 samples, 0.22%)</title><rect x="99.6604%" y="629" width="0.2161%" height="15" fill="rgb(212,6,19)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="639.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.22%)</title><rect x="99.6604%" y="613" width="0.2161%" height="15" fill="rgb(218,1,36)" fg:x="3228" fg:w="7"/><text x="99.9104%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;codebook::parser::WordLocation&gt;&gt; (10 samples, 0.31%)</title><rect x="99.6604%" y="789" width="0.3087%" height="15" fill="rgb(246,84,54)" fg:x="3228" fg:w="10"/><text x="99.9104%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;codebook::parser::WordLocation&gt;&gt; (3 samples, 0.09%)</title><rect x="99.8765%" y="773" width="0.0926%" height="15" fill="rgb(242,110,6)" fg:x="3235" fg:w="3"/><text x="100.1265%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="99.8765%" y="757" width="0.0926%" height="15" fill="rgb(214,47,5)" fg:x="3235" fg:w="3"/><text x="100.1265%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3 samples, 0.09%)</title><rect x="99.8765%" y="741" width="0.0926%" height="15" fill="rgb(218,159,25)" fg:x="3235" fg:w="3"/><text x="100.1265%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.09%)</title><rect x="99.8765%" y="725" width="0.0926%" height="15" fill="rgb(215,211,28)" fg:x="3235" fg:w="3"/><text x="100.1265%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.09%)</title><rect x="99.8765%" y="709" width="0.0926%" height="15" fill="rgb(238,59,32)" fg:x="3235" fg:w="3"/><text x="100.1265%" y="719.50"></text></g><g><title>__rustc::__rdl_dealloc (3 samples, 0.09%)</title><rect x="99.8765%" y="693" width="0.0926%" height="15" fill="rgb(226,82,3)" fg:x="3235" fg:w="3"/><text x="100.1265%" y="703.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.09%)</title><rect x="99.8765%" y="677" width="0.0926%" height="15" fill="rgb(240,164,32)" fg:x="3235" fg:w="3"/><text x="100.1265%" y="687.50"></text></g><g><title>all (3,239 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(232,46,7)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="1071.50"></text></g><g><title>8672861952 (3,239 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(229,129,53)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="1055.50">8672861952</text></g><g><title>_main (3,239 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(234,188,29)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="1039.50">_main</text></g><g><title>std::rt::lang_start_internal (3,239 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(246,141,4)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,239 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(229,23,39)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,239 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(206,12,3)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,239 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(252,226,20)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,239 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(216,123,35)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (3,239 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(212,68,40)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,239 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(254,125,32)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,239 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(253,97,22)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,239 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(241,101,14)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,239 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(238,103,29)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,239 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(233,195,47)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="863.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,239 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(246,218,30)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="847.50">core::ops::function::FnOnce::call_once</text></g><g><title>codebook::main (3,239 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(219,145,47)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="831.50">codebook::main</text></g><g><title>codebook::run_benchmark (3,239 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(243,12,26)" fg:x="0" fg:w="3239"/><text x="0.2500%" y="815.50">codebook::run_benchmark</text></g><g><title>std::io::stdio::_print (1 samples, 0.03%)</title><rect x="99.9691%" y="789" width="0.0309%" height="15" fill="rgb(214,87,16)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="799.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.03%)</title><rect x="99.9691%" y="773" width="0.0309%" height="15" fill="rgb(208,99,42)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="783.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.03%)</title><rect x="99.9691%" y="757" width="0.0309%" height="15" fill="rgb(253,99,2)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="767.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.03%)</title><rect x="99.9691%" y="741" width="0.0309%" height="15" fill="rgb(220,168,23)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="751.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.03%)</title><rect x="99.9691%" y="725" width="0.0309%" height="15" fill="rgb(242,38,24)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="735.50"></text></g><g><title>std::io::default_write_fmt (1 samples, 0.03%)</title><rect x="99.9691%" y="709" width="0.0309%" height="15" fill="rgb(225,182,9)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.03%)</title><rect x="99.9691%" y="693" width="0.0309%" height="15" fill="rgb(243,178,37)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="703.50"></text></g><g><title>&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="99.9691%" y="677" width="0.0309%" height="15" fill="rgb(232,139,19)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="687.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="99.9691%" y="661" width="0.0309%" height="15" fill="rgb(225,201,24)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="671.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="99.9691%" y="645" width="0.0309%" height="15" fill="rgb(221,47,46)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="655.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="99.9691%" y="629" width="0.0309%" height="15" fill="rgb(249,23,13)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="639.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.03%)</title><rect x="99.9691%" y="613" width="0.0309%" height="15" fill="rgb(219,9,5)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.03%)</title><rect x="99.9691%" y="597" width="0.0309%" height="15" fill="rgb(254,171,16)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="607.50"></text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (1 samples, 0.03%)</title><rect x="99.9691%" y="581" width="0.0309%" height="15" fill="rgb(230,171,20)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="591.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (1 samples, 0.03%)</title><rect x="99.9691%" y="565" width="0.0309%" height="15" fill="rgb(210,71,41)" fg:x="3238" fg:w="1"/><text x="100.2191%" y="575.50"></text></g></svg></svg>